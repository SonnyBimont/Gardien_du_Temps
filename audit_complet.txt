=== AUDIT COMPLET GARDIEN DU TEMPS ===
Date: Mon Jun 23 14:53:03 CEST 2025

=== 1. TAILLE DES FICHIERS ===
 15233 total
  1977 ../frontend/src/components/dashboard/DirectorDashboard.jsx
  1017 ../frontend/src/components/common/YearlyPlanningRoadmap.jsx
   890 ../frontend/src/components/common/RealizedHoursRoadmap.jsx
   867 ../frontend/src/components/forms/CreateUserForm.jsx
   834 ../frontend/src/components/dashboard/AdminDashboard.jsx
   807 ../frontend/src/stores/adminStore.js
   751 ../frontend/src/utils/timeCalculations.js
   723 ../frontend/src/stores/projectStore.js
   497 ../frontend/src/stores/timeStore.js
   472 ../frontend/src/components/forms/EditUserForm.jsx
   434 ../frontend/src/components/dashboard/AnimatorDashboard.jsx
   424 ../frontend/src/components/forms/CreateProjectForm.jsx
   387 ../frontend/src/components/forms/CreateStructureForm.jsx
   371 ../frontend/src/components/timetracking/TimeTable.jsx
   343 ../frontend/src/components/common/Input.jsx
   336 ../frontend/src/components/common/PlanningModal.jsx
   326 ../frontend/src/components/auth/LoginForm.jsx
   318 ../frontend/src/components/common/Layout.jsx
   283 ../frontend/src/components/common/Modal.jsx
   266 ../frontend/src/components/forms/CreateTaskForm.jsx
   251 ../frontend/src/components/common/QuickTimeTrackingIcons.jsx
   246 ../frontend/src/components/timetracking/TimeTracker.jsx
   214 ../frontend/src/utils/exportCSV.js
   213 ../frontend/src/components/common/YearTypeSelector.jsx
   191 ../frontend/src/utils/dateUtils.js
   186 ../frontend/src/components/common/Card.jsx
   185 ../frontend/src/pages/DashboardPage.jsx
   185 ../frontend/src/App.js
   176 ../frontend/src/components/common/Button.jsx
   166 ../frontend/src/stores/authStore.js
   155 ../frontend/src/components/common/VacationTester.jsx
   144 ../frontend/src/pages/LoginPage.jsx
   131 ../frontend/src/index.js
   112 ../frontend/src/stores/schoolVacationStore.js
    77 ../frontend/src/services/api.js
    70 ../frontend/src/stores/planningStore.js
    64 ../frontend/src/components/common/StatsCard.jsx
    48 ../frontend/src/components/common/UserSettings.jsx
    36 ../frontend/src/components/common/LoadingSpinner.jsx
    26 ../frontend/src/hooks/useVacations.js
    13 ../frontend/src/reportWebVitals.js
     8 ../frontend/src/config/constants.js
     8 ../frontend/src/App.test.js
     5 ../frontend/src/setupTests.js
 12303 total
  1526 ../backend/src/controllers/userController.js
   988 ../backend/src/routes/timeTrackingRoutes.js
   862 ../backend/src/routes/schoolVacationRoutes.js
   769 ../backend/src/controllers/timeTrackingController.js
   548 ../backend/src/controllers/schoolVacationController.js
   514 ../backend/src/routes/taskRoutes.js
   494 ../backend/src/routes/plannedScheduleRoutes.js
   427 ../backend/src/routes/activityLogRoutes.js
   420 ../backend/src/routes/userRoutes.js
   413 ../backend/src/routes/projectRoutes.js
   330 ../backend/src/routes/structureRoutes.js
   302 ../backend/src/routes/authRoutes.js
   280 ../backend/src/controllers/taskController.js
   278 ../backend/src/controllers/plannedScheduleController.js
   242 ../backend/src/controllers/activityLogController.js
   240 ../backend/src/controllers/structureController.js
   195 ../backend/src/controllers/projectController.js
   190 ../backend/src/seeders/20250513145031-demo-planned-schedules.js
   170 ../backend/src/seeders/20250513144954-demo-time-trackings.js
   170 ../backend/src/seeders/20250513144000-demo-tasks.js
   154 ../backend/src/seeders/20250513144000-demo-school-vacations.js
   153 ../backend/src/seeders/20250513145135-demo-activity-logs.js
   150 ../backend/src/seeders/20250513143951-demo-users.js
   144 ../backend/src/controllers/hourPlanningController.js
   128 ../backend/src/models/User.js
   123 ../backend/src/controllers/authController.js
   108 ../backend/src/config/database.js
   105 ../backend/src/models/index.js
    89 ../backend/src/app.js
    88 ../backend/src/models/Hour_Planning.js
    86 ../backend/src/migrations/20250513142358-create-users.js
    82 ../backend/src/models/Structure.js
    75 ../backend/src/migrations/20250613073337-create-hour-planning.js
    71 ../backend/src/seeders/20250513144918-demo-user-tasks.js
    71 ../backend/src/models/Task.js
    68 ../backend/src/migrations/20250513143356-create-tasks.js
    65 ../backend/src/migrations/20250513143622-create-planned-schedules.js
    64 ../backend/src/models/Project.js
    62 ../backend/src/seeders/20250513144000-demo-projects.js
    62 ../backend/src/migrations/20250513143545-create-time-trackings.js
    61 ../backend/src/models/Time_Tracking.js
    59 ../backend/src/config/swagger.js
    56 ../backend/src/migrations/20250513143233-create-projects.js
    55 ../backend/src/models/Planned_Shedule.js
    54 ../backend/src/migrations/20250513143511-create-user-tasks.js
    52 ../backend/src/migrations/20250513143709-create-activity-logs.js
    52 ../backend/src/migrations/20250513134855-create-structures.js
    50 ../backend/src/services/scheduleService.js
    46 ../backend/src/migrations/20250513143131-create-school-vacations.js
    44 ../backend/src/models/User_Task.js
    44 ../backend/src/middlewares/auth.js
    42 ../backend/src/seeders/20250513143950-demo-structures.js
    42 ../backend/src/models/Activity_Logs.js
    38 ../backend/src/migrations/20250606141433-add-structure-contact-fields.js
    36 ../backend/src/routes/index.js
    36 ../backend/src/models/School_Vacations.js
    32 ../backend/src/config/config.js
    27 ../backend/src/config/sequelize-cli-config.js
    24 ../backend/src/tests/integration/routes/authRoutes.test.js
    23 ../backend/src/validators/userValidator.js
    21 ../backend/src/utils/formatDate.js
    21 ../backend/src/migrations/20250618122138-add-year-type-to-users.js
    21 ../backend/src/migrations/20250521085206-add-task-id-to-time-trackings.js
    18 ../backend/src/tests/unit/controllers/authController.test.js
    17 ../backend/src/migrations/20250616135309-add--assigned-to-to-project.js
    12 ../backend/src/tests/unit/utils/formatDate.test.js
     8 ../backend/src/routes/hourPlanningRoutes.js
     4 ../backend/src/tests/unit/example.test.js
     2 ../backend/src/tests/integration/example.test.js

=== 1. TAILLE DES FICHIERS ===
 15233 total
  1977 ../frontend/src/components/dashboard/DirectorDashboard.jsx
  1017 ../frontend/src/components/common/YearlyPlanningRoadmap.jsx
   890 ../frontend/src/components/common/RealizedHoursRoadmap.jsx
   867 ../frontend/src/components/forms/CreateUserForm.jsx
   834 ../frontend/src/components/dashboard/AdminDashboard.jsx
   807 ../frontend/src/stores/adminStore.js
   751 ../frontend/src/utils/timeCalculations.js
   723 ../frontend/src/stores/projectStore.js
   497 ../frontend/src/stores/timeStore.js
   472 ../frontend/src/components/forms/EditUserForm.jsx
   434 ../frontend/src/components/dashboard/AnimatorDashboard.jsx
   424 ../frontend/src/components/forms/CreateProjectForm.jsx
   387 ../frontend/src/components/forms/CreateStructureForm.jsx
   371 ../frontend/src/components/timetracking/TimeTable.jsx
   343 ../frontend/src/components/common/Input.jsx
   336 ../frontend/src/components/common/PlanningModal.jsx
   326 ../frontend/src/components/auth/LoginForm.jsx
   318 ../frontend/src/components/common/Layout.jsx
   283 ../frontend/src/components/common/Modal.jsx
   266 ../frontend/src/components/forms/CreateTaskForm.jsx
   251 ../frontend/src/components/common/QuickTimeTrackingIcons.jsx
   246 ../frontend/src/components/timetracking/TimeTracker.jsx
   214 ../frontend/src/utils/exportCSV.js
   213 ../frontend/src/components/common/YearTypeSelector.jsx
   191 ../frontend/src/utils/dateUtils.js
   186 ../frontend/src/components/common/Card.jsx
   185 ../frontend/src/pages/DashboardPage.jsx
   185 ../frontend/src/App.js
   176 ../frontend/src/components/common/Button.jsx
   166 ../frontend/src/stores/authStore.js
   155 ../frontend/src/components/common/VacationTester.jsx
   144 ../frontend/src/pages/LoginPage.jsx
   131 ../frontend/src/index.js
   112 ../frontend/src/stores/schoolVacationStore.js
    77 ../frontend/src/services/api.js
    70 ../frontend/src/stores/planningStore.js
    64 ../frontend/src/components/common/StatsCard.jsx
    48 ../frontend/src/components/common/UserSettings.jsx
    36 ../frontend/src/components/common/LoadingSpinner.jsx
    26 ../frontend/src/hooks/useVacations.js
    13 ../frontend/src/reportWebVitals.js
     8 ../frontend/src/config/constants.js
     8 ../frontend/src/App.test.js
     5 ../frontend/src/setupTests.js
 12303 total
  1526 ../backend/src/controllers/userController.js
   988 ../backend/src/routes/timeTrackingRoutes.js
   862 ../backend/src/routes/schoolVacationRoutes.js
   769 ../backend/src/controllers/timeTrackingController.js
   548 ../backend/src/controllers/schoolVacationController.js
   514 ../backend/src/routes/taskRoutes.js
   494 ../backend/src/routes/plannedScheduleRoutes.js
   427 ../backend/src/routes/activityLogRoutes.js
   420 ../backend/src/routes/userRoutes.js
   413 ../backend/src/routes/projectRoutes.js
   330 ../backend/src/routes/structureRoutes.js
   302 ../backend/src/routes/authRoutes.js
   280 ../backend/src/controllers/taskController.js
   278 ../backend/src/controllers/plannedScheduleController.js
   242 ../backend/src/controllers/activityLogController.js
   240 ../backend/src/controllers/structureController.js
   195 ../backend/src/controllers/projectController.js
   190 ../backend/src/seeders/20250513145031-demo-planned-schedules.js
   170 ../backend/src/seeders/20250513144954-demo-time-trackings.js
   170 ../backend/src/seeders/20250513144000-demo-tasks.js
   154 ../backend/src/seeders/20250513144000-demo-school-vacations.js
   153 ../backend/src/seeders/20250513145135-demo-activity-logs.js
   150 ../backend/src/seeders/20250513143951-demo-users.js
   144 ../backend/src/controllers/hourPlanningController.js
   128 ../backend/src/models/User.js
   123 ../backend/src/controllers/authController.js
   108 ../backend/src/config/database.js
   105 ../backend/src/models/index.js
    89 ../backend/src/app.js
    88 ../backend/src/models/Hour_Planning.js
    86 ../backend/src/migrations/20250513142358-create-users.js
    82 ../backend/src/models/Structure.js
    75 ../backend/src/migrations/20250613073337-create-hour-planning.js
    71 ../backend/src/seeders/20250513144918-demo-user-tasks.js
    71 ../backend/src/models/Task.js
    68 ../backend/src/migrations/20250513143356-create-tasks.js
    65 ../backend/src/migrations/20250513143622-create-planned-schedules.js
    64 ../backend/src/models/Project.js
    62 ../backend/src/seeders/20250513144000-demo-projects.js
    62 ../backend/src/migrations/20250513143545-create-time-trackings.js
    61 ../backend/src/models/Time_Tracking.js
    59 ../backend/src/config/swagger.js
    56 ../backend/src/migrations/20250513143233-create-projects.js
    55 ../backend/src/models/Planned_Shedule.js
    54 ../backend/src/migrations/20250513143511-create-user-tasks.js
    52 ../backend/src/migrations/20250513143709-create-activity-logs.js
    52 ../backend/src/migrations/20250513134855-create-structures.js
    50 ../backend/src/services/scheduleService.js
    46 ../backend/src/migrations/20250513143131-create-school-vacations.js
    44 ../backend/src/models/User_Task.js
    44 ../backend/src/middlewares/auth.js
    42 ../backend/src/seeders/20250513143950-demo-structures.js
    42 ../backend/src/models/Activity_Logs.js
    38 ../backend/src/migrations/20250606141433-add-structure-contact-fields.js
    36 ../backend/src/routes/index.js
    36 ../backend/src/models/School_Vacations.js
    32 ../backend/src/config/config.js
    27 ../backend/src/config/sequelize-cli-config.js
    24 ../backend/src/tests/integration/routes/authRoutes.test.js
    23 ../backend/src/validators/userValidator.js
    21 ../backend/src/utils/formatDate.js
    21 ../backend/src/migrations/20250618122138-add-year-type-to-users.js
    21 ../backend/src/migrations/20250521085206-add-task-id-to-time-trackings.js
    18 ../backend/src/tests/unit/controllers/authController.test.js
    17 ../backend/src/migrations/20250616135309-add--assigned-to-to-project.js
    12 ../backend/src/tests/unit/utils/formatDate.test.js
     8 ../backend/src/routes/hourPlanningRoutes.js
     4 ../backend/src/tests/unit/example.test.js
     2 ../backend/src/tests/integration/example.test.js

=== 2. STRUCTURE PROJET ===
=== STRUCTURE FRONTEND ===

=== STRUCTURE BACKEND ===

=== 3. PROBLÈMES DÉTECTÉS ===
../frontend/src/components/auth/LoginForm.jsx:      console.error('Erreur de connexion:', error);
../frontend/src/components/auth/LoginForm.jsx:                    // TODO: Implémenter la récupération de mot de passe
../frontend/src/components/common/QuickTimeTrackingIcons.jsx:      console.error(`❌ Erreur lors du pointage ${action}:`, error);
../frontend/src/components/common/VacationTester.jsx:  console.log('🏖️ Test chargement vacances...');
../frontend/src/components/common/VacationTester.jsx:        console.log('✅ Synchronisation réussie');
../frontend/src/components/common/VacationTester.jsx:      console.error('❌ Erreur synchronisation:', error);
../frontend/src/components/common/VacationTester.jsx:      console.log('✅ Synchronisation complète réussie');
../frontend/src/components/common/VacationTester.jsx:    console.error('❌ Erreur synchronisation complète:', error);
../frontend/src/components/common/YearTypeSelector.jsx:    console.log('🔄 Sélection type:', newType);
../frontend/src/components/common/YearTypeSelector.jsx:      console.log('✅ Aucun changement nécessaire');
../frontend/src/components/common/YearTypeSelector.jsx:    console.log('💾 Sauvegarde du type:', selectedType);
../frontend/src/components/common/YearTypeSelector.jsx:      console.log('✅ Type d\'année mis à jour');
../frontend/src/components/common/YearTypeSelector.jsx:      console.error('❌ Erreur:', result.error);
../frontend/src/components/common/PlanningModal.jsx:      console.log('📝 Données du formulaire:', formData);
../frontend/src/components/common/PlanningModal.jsx:      console.log('📤 Données à sauvegarder:', dataToSave);
../frontend/src/components/common/PlanningModal.jsx:      console.log('✅ Résultat:', result);
../frontend/src/components/common/PlanningModal.jsx:        console.log('🎉 Sauvegarde réussie');
../frontend/src/components/common/PlanningModal.jsx:        console.error('❌ Erreur serveur:', errorMessage);
../frontend/src/components/common/PlanningModal.jsx:      console.error('💥 Erreur catch:', error);
../frontend/src/components/common/PlanningModal.jsx:        console.log('🗑️ Suppression réussie');
../frontend/src/components/common/PlanningModal.jsx:      console.error('Erreur suppression:', error);
../frontend/src/components/common/Layout.jsx:      console.error('Erreur lors de la déconnexion:', error);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:    console.log('🔄 Chargement données année:', { selectedYear, yearType });
../frontend/src/components/common/RealizedHoursRoadmap.jsx:    console.log('📅 Période de chargement:', { startDate, endDate });
../frontend/src/components/common/RealizedHoursRoadmap.jsx:      console.log(`📊 Données reçues: ${entries.length} entrées`);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:      console.log(`✅ Données traitées: ${Object.keys(yearlyData).length} jours, ${totalRealizedYear}h total`);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:    console.error('❌ Erreur chargement heures réalisées:', error);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:      console.error('Erreur calcul heures mensuelles réalisées:', error);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('🗺️ Changement de zone:', newZone);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('🔄 Synchronisation des vacances depuis l\'API educ.gouv...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📅 Années à synchroniser:', schoolYears);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📡 Réponse API complète:', response.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📊 Type de response.data.results:', typeof response.data.results);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📊 Contenu results:', response.data.results);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('✅ Synchronisation réussie');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log(`📊 Résultats traités: ${count} périodes, ${results.length} détails`);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('🔄 Rechargement des vacances...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.error('❌ Erreur synchronisation:', error);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.error('❌ Détails erreur:', error.response?.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:          console.log('🔄 Aucune vacance trouvée, synchronisation...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('ℹ️ Synchronisation automatique non disponible:', error.message);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.warn('⚠️ Erreur vacances:', vacationError);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('🏖️ Vacances chargées, test avec une date...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('Test date 23/12/2024:', {
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.error('Erreur calcul heures mensuelles planifiées:', error);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📤 Données complètes envoyées:', dataWithDate);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('🔍 DEBUG: Vérification vacances 2024-2025...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('📊 Vacances 2024-2025 en base:', response1.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('📊 API gouv 2024-2025:', response2.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('📊 Sync forcée 2024-2025:', response3.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.error('❌ Erreur debug:', error);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('🔧 Données avant modification:', formData);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('👤 User ID:', user.id);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('📤 Données envoyées:', updateData);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('✅ Résultat:', result);
../frontend/src/components/forms/EditUserForm.jsx:      console.error('❌ Erreur dans la réponse:', result);
../frontend/src/components/forms/EditUserForm.jsx:    console.error('❌ Erreur lors de la modification:', error);
../frontend/src/components/forms/EditUserForm.jsx:    console.error('❌ Détails de l\'erreur:', error.response?.data);
../frontend/src/components/forms/CreateTaskForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/forms/CreateUserForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/forms/CreateStructureForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/forms/CreateProjectForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:        console.error('Erreur lors du chargement des données:', error);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:      console.log(`🔄 Action de pointage: ${action}`);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:      console.log(`✅ Résultat action ${action}:`, result);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:      console.error(`❌ Erreur lors du pointage ${action}:`, error);
../frontend/src/components/dashboard/AdminDashboard.jsx:      console.log('🔄 Changement de période vers:', period);
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('📅 Plage de dates calculée:', dateRangeData);
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('✅ Données rechargées pour la période:', period);
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.error('❌ Erreur lors du changement de période:', error);
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('🔧 Modification utilisateur:', user);
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Utilisateur mis à jour avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Utilisateur créé avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('🔧 Modification structure:', structure);
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Structure créée avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Structure mise à jour avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('🔄 Chargement initial des données admin...');
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('✅ Données admin chargées avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.error('❌ Erreur lors du chargement initial:', error);
../frontend/src/components/dashboard/AdminDashboard.jsx:                      console.log(`✅ Statut utilisateur ${user.id} modifié`);
../frontend/src/components/dashboard/AdminDashboard.jsx:                      console.error('❌ Erreur toggle user status:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error('Erreur lors du chargement des données:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('🔄 Chargement données équipe pour structure:', user.structure_id);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('📊 Réponse API team-summary:', result);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('📋 Données API reçues:', apiData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('👥 Utilisateurs depuis API:', usersFromAPI);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('🗺️ Map des données de travail:', workDataMap);
../frontend/src/components/dashboard/DirectorDashboard.jsx:          console.log(`✅ Données trouvées pour ${animator.first_name}:`, workData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:          console.log(`⚠️ Pas de données pour ${animator.first_name}, calcul par défaut`);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('📋 Tableau final avec tous les animateurs:', allAnimatorsData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.warn('⚠️ API team-summary: pas de données ou échec');
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.error('❌ Erreur chargement équipe:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('🔄 Fallback avec données par défaut:', fallbackData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error(`❌ Erreur lors du pointage ${action}:`, error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:        console.log('Export des données d\'équipe...');
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error('Erreur lors de l\'export:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:        console.log(`✅ Statut animateur ${animator.id} modifié`);
../frontend/src/components/dashboard/DirectorDashboard.jsx:        console.error('❌ Erreur toggle status:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:                          console.log(`✅ Statut animateur ${member.id} modifié`);
../frontend/src/components/dashboard/DirectorDashboard.jsx:                          console.error('❌ Erreur toggle status:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error('Erreur chargement stats animateur:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('🔄 Calcul des stats complètes...');
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Entrées reçues:', entries.length);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📋 Première entrée:', entries[0]);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('⚠️ Aucune entrée, retour stats vides');
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📈 Jours traités:', processedDays.length);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Premier jour traité:', processedDays[0]);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('⚠️ Aucun jour traité');
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('✅ Working days créés:', workingDays.length);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Premier working day:', workingDays[0]);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('✅ Stats complètes calculées:', result);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Working days dans result:', result.workingDays.length);
../frontend/src/services/api.js:      console.log(`🚀 API Request: ${config.method?.toUpperCase()} ${config.url}`);
../frontend/src/services/api.js:    console.log('🚀 API Request:', config.method?.toUpperCase(), config.url);
../frontend/src/services/api.js:    console.log('🌐 Full URL:', config.baseURL + config.url);
../frontend/src/services/api.js:    console.error('❌ Request Error:', error);
../frontend/src/services/api.js:      console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
../frontend/src/services/api.js:    console.error('❌ Response Error:', error);
../frontend/src/services/api.js:      console.error('Erreur serveur:', error.response.data);
../frontend/src/services/api.js:      console.error('Erreur de réseau - Vérifiez votre connexion');
../frontend/src/stores/schoolVacationStore.js:          console.log('🎓 Année scolaire détectée:', schoolYearStr);
../frontend/src/stores/schoolVacationStore.js:          console.log('📅 Année civile convertie en scolaire:', `${year}-${year + 1}`);
../frontend/src/stores/schoolVacationStore.js:      console.log('🏖️ Appel API vacances:', { zone: zone || 'TOUTES', startDate, endDate, params: params.toString() });
../frontend/src/stores/schoolVacationStore.js:        console.log('✅ Vacances reçues:', response.data.data);
../frontend/src/stores/schoolVacationStore.js:      console.error('❌ Erreur chargement vacances:', error);
../frontend/src/stores/timeStore.js:      console.warn('API today non disponible, fallback...', error.response?.status);
../frontend/src/stores/timeStore.js:      console.warn('API stats non disponible, calcul local...', error.response?.status);
../frontend/src/stores/timeStore.js:    console.log('📡 Requête team-summary avec params:', params.toString());
../frontend/src/stores/timeStore.js:    console.log('📊 Réponse brute team-summary:', response.data);
../frontend/src/stores/timeStore.js:    console.error('❌ Erreur fetchTeamSummary:', error);
../frontend/src/stores/adminStore.js:    console.log('🔧 adminStore.updateUser appelé avec:', { userId, userData });
../frontend/src/stores/adminStore.js:      console.log('✅ Réponse API updateUser:', response.data);
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur updateUser:', error);
../frontend/src/stores/adminStore.js:      console.error('❌ Réponse d\'erreur:', error.response?.data);
../frontend/src/stores/adminStore.js:      console.log(`🔄 Toggle user ${userId} to ${active ? 'active' : 'inactive'}`);
../frontend/src/stores/adminStore.js:        console.log(`✅ User ${userId} ${active ? 'activé' : 'désactivé'}`);
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur toggle user status:', errorMessage);
../frontend/src/stores/adminStore.js:        console.log('🏢 Structures à mettre dans le store:', structures);
../frontend/src/stores/adminStore.js:      console.log('🔄 fetchStats appelé avec:', { days, startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Utilisation période fixe:', { startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Utilisation période glissante:', days, 'jours');
../frontend/src/stores/adminStore.js:        console.log('📅 Utilisation période par défaut: 7 jours');
../frontend/src/stores/adminStore.js:        console.log('📡 Réponse API stats-fixed (nouvelle route):', response.data);
../frontend/src/stores/adminStore.js:          console.log('✅ Stats mises à jour via nouvelle route');
../frontend/src/stores/adminStore.js:        console.warn('⚠️ Nouvelle route stats-fixed non disponible, fallback vers ancienne route:', fixedRouteError.response?.status);
../frontend/src/stores/adminStore.js:          console.log('📡 Réponse API stats (ancienne route):', response.data);
../frontend/src/stores/adminStore.js:            console.log('✅ Stats mises à jour via ancienne route (fallback)');
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur fetch stats détaillée:', error);
../frontend/src/stores/adminStore.js:      console.log('🔄 fetchDashboardStats appelé avec:', { days, startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Dashboard période fixe:', { startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Dashboard période glissante:', days, 'jours');
../frontend/src/stores/adminStore.js:        console.log('📅 Dashboard période par défaut: 7 jours');
../frontend/src/stores/adminStore.js:        console.log('📡 Réponse API dashboard-stats-fixed (nouvelle route):', response.data);
../frontend/src/stores/adminStore.js:          console.log('✅ Dashboard stats mises à jour via nouvelle route');
../frontend/src/stores/adminStore.js:        console.warn('⚠️ Nouvelle route dashboard-stats-fixed non disponible, fallback vers ancienne route:', fixedRouteError.response?.status);
../frontend/src/stores/adminStore.js:          console.log('📡 Réponse API dashboard-stats (ancienne route):', response.data);
../frontend/src/stores/adminStore.js:            console.log('✅ Dashboard stats mises à jour via ancienne route (fallback)');
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur dashboard stats:', error);
../frontend/src/stores/adminStore.js:      console.log('🔄 fetchRecentActivity appelé avec:', { limit, days, startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Activité récente période fixe:', { startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Activité récente période glissante:', days, 'jours');
../frontend/src/stores/adminStore.js:        console.log('📡 Réponse API recent-activity-period (nouvelle route):', response.data);
../frontend/src/stores/adminStore.js:          console.log('✅ Activité récente mise à jour via nouvelle route:', activityData.length, 'entrées');
../frontend/src/stores/adminStore.js:        console.warn('⚠️ Nouvelle route recent-activity-period non disponible, fallback vers ancienne route:', fixedRouteError.response?.status);
../frontend/src/stores/adminStore.js:          console.log('📡 Réponse API recent-activity (ancienne route):', response.data);
../frontend/src/stores/adminStore.js:            console.log('✅ Activité récente mise à jour via ancienne route (fallback):', activityData.length, 'entrées');
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur activité récente:', error);
../frontend/src/stores/planningStore.js:      console.error('Erreur planningStore:', error);
../frontend/src/stores/authStore.js:          console.error('Erreur vérification auth:', error);
../frontend/src/stores/authStore.js:  console.log('🔄 AuthStore: Mise à jour yearType vers:', yearType);
../frontend/src/stores/authStore.js:    console.log('📡 Réponse API:', response.data);
../frontend/src/stores/authStore.js:      console.log('✅ User mis à jour:', updatedUser);
../frontend/src/stores/authStore.js:    console.error('❌ Erreur mise à jour type d\'année:', error);
../frontend/src/hooks/useVacations.js:        console.log('🏖️ Hook useVacations: Chargement...', { startDate, endDate, zone });
../frontend/src/App.js:      console.error('Navigation error:', error);
../frontend/src/App.js:        console.error('Erreur lors de l\'initialisation:', error);
../frontend/src/index.js:    console.error('Erreur non capturée:', event.error);
../frontend/src/index.js:    console.error('Promesse rejetée non gérée:', event.reason);
../frontend/src/index.js:    console.log('🚀 Mode développement activé');
../frontend/src/index.js:    console.log('API URL:', process.env.REACT_APP_API_URL || 'http://localhost:3001');
../frontend/src/index.js:          console.log('SW registered: ', registration);
../frontend/src/index.js:          console.log('SW registration failed: ', registrationError);
../frontend/src/index.js:      getCLS(console.log);
../frontend/src/index.js:      getFID(console.log);
../frontend/src/index.js:      getFCP(console.log);
../frontend/src/index.js:      getLCP(console.log);
../frontend/src/index.js:      getTTFB(console.log);
../frontend/src/index.js:    console.error('Erreur critique lors du rendu:', error);
../frontend/src/index.js:    console.log('🔄 Hot reload détecté');
../frontend/src/utils/timeCalculations.js:  console.group(`🕐 Debug Time Entry - ${entry.date}`);
../frontend/src/utils/timeCalculations.js:  console.log('Arrival:', entry.arrival || 'Non pointé');
../frontend/src/utils/timeCalculations.js:  console.log('Break Start:', entry.breakStart || 'Pas de pause');
../frontend/src/utils/timeCalculations.js:  console.log('Break End:', entry.breakEnd || 'Pause non terminée');
../frontend/src/utils/timeCalculations.js:  console.log('Departure:', entry.departure || 'Non pointé');
../frontend/src/utils/timeCalculations.js:  console.log('Working Hours:', entry.formattedWorkingHours);
../frontend/src/utils/timeCalculations.js:  console.log('Status:', entry.status);
../frontend/src/utils/timeCalculations.js:  console.groupEnd();
../frontend/src/utils/dateUtils.js:      console.log('🎓 getCurrentYear SCHOOL:', {
../frontend/src/utils/dateUtils.js:  console.log('🎓 Debug année scolaire:');
../frontend/src/utils/dateUtils.js:  console.log('- Date du jour:', today.toLocaleDateString('fr-FR'));
../frontend/src/utils/dateUtils.js:  console.log('- Mois actuel:', today.getMonth() + 1); // +1 car getMonth() retourne 0-11
../frontend/src/utils/dateUtils.js:  console.log('- Année scolaire actuelle:', `${currentSchoolYear}-${currentSchoolYear + 1}`);
../frontend/src/utils/dateUtils.js:  console.log('- Période:', `${currentSchoolYear}-09-01 → ${currentSchoolYear + 1}-08-31`);
../backend/src/middlewares/auth.js:            console.log('🎫 Token trouvé:', token ? 'OUI' : 'NON');
../backend/src/middlewares/auth.js:            console.error('❌ Pas de token');
../backend/src/middlewares/auth.js:        console.error('❌ Erreur auth middleware:', error);
../backend/src/services/scheduleService.js:    console.log('Démarrage de la synchronisation automatique des vacances scolaires');
../backend/src/services/scheduleService.js:        console.log('Synchronisation des vacances scolaires terminée avec succès');
../backend/src/services/scheduleService.js:        console.error('Erreur lors de la synchronisation automatique des vacances scolaires:', error);
../backend/src/services/scheduleService.js:        console.log('Tâche planifiée pour la synchronisation des vacances scolaires configurée');
../backend/src/controllers/userController.js:    console.error('Erreur: Modèles non importés correctement');
../backend/src/controllers/userController.js:    console.log('User:', !!User);
../backend/src/controllers/userController.js:    console.log('Structure:', !!Structure);
../backend/src/controllers/userController.js:    console.log('TimeTracking:', !!TimeTracking);
../backend/src/controllers/userController.js:    console.log('Task:', !!Task);
../backend/src/controllers/userController.js:        console.log('🔍 Conditions de recherche utilisateurs:', whereConditions);
../backend/src/controllers/userController.js:        console.log(`📊 Trouvé ${users.length} utilisateurs (actifs: ${users.filter(u => u.active).length}, inactifs: ${users.filter(u => !u.active).length})`);
../backend/src/controllers/userController.js:        console.error('Erreur getUsers:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getUserById:', error);
../backend/src/controllers/userController.js:        console.error('Erreur createUser:', error);
../backend/src/controllers/userController.js:    console.error('Erreur lors de la mise à jour de l\'utilisateur:', error);
../backend/src/controllers/userController.js:        console.error('Erreur deleteUser:', error);
../backend/src/controllers/userController.js:        console.error('Erreur restoreUser:', error);
../backend/src/controllers/userController.js:        console.error('Erreur toggleUserStatus:', error);
../backend/src/controllers/userController.js:    console.log('🔍 Headers authorization:', req.headers.authorization);
../backend/src/controllers/userController.js:    console.log('🔍 req.user complet:', req.user);
../backend/src/controllers/userController.js:    console.log('🔍 req.user.id:', req.user?.id);
../backend/src/controllers/userController.js:    console.log('🔍 Type de req.user.id:', typeof req.user?.id);
../backend/src/controllers/userController.js:    console.log('🔍 req.body:', req.body);
../backend/src/controllers/userController.js:    console.log('🔄 Données à mettre à jour:', updateData);
../backend/src/controllers/userController.js:    console.log('✅ Utilisateur mis à jour:', updatedUser.toJSON());
../backend/src/controllers/userController.js:    console.error('❌ Erreur lors de la mise à jour du profil:', error);
../backend/src/controllers/userController.js:        console.log('📊 getStats appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période fixe:', dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période glissante:', days, 'jours depuis:', dateRange.start);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation semaine en cours par défaut:', dateRange);
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calcul TimeTracking (non bloquant):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Stats calculées:', statsData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getStats:', error);
../backend/src/controllers/userController.js:        console.log('📊 getDashboardStats appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.log('📅 Dashboard période fixe:', dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Dashboard période glissante:', days, 'jours depuis:', dateRange.start);
../backend/src/controllers/userController.js:            console.log('📅 Dashboard semaine en cours par défaut:', dateRange);
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calcul TimeTracking aujourd\'hui (non bloquant):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Dashboard stats calculées:', dashboardData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getDashboardStats:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getRecentActivity:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getSystemHealth:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getAuditLogs:', error);
../backend/src/controllers/userController.js:        console.log('📊 getStatsWithFixedPeriods appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.error('❌ Modèles essentiels non disponibles');
../backend/src/controllers/userController.js:            console.log('📅 Utilisation dates explicites:', dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période nommée:', period, dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période glissante:', daysInt, 'jours');
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période par défaut: semaine en cours');
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calculs TimeTracking (ignorée):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Stats calculées:', statsData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getStatsWithFixedPeriods détaillée:', error);
../backend/src/controllers/userController.js:        console.log('📊 getDashboardStatsWithFixedPeriods appelé avec query:', req.query);
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calculs dashboard TimeTracking (ignorée):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Dashboard stats calculées:', dashboardData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getDashboardStatsWithFixedPeriods:', error);
../backend/src/controllers/userController.js:        console.log('📊 getRecentActivityWithPeriod appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.warn('⚠️ TimeTracking non disponible');
../backend/src/controllers/userController.js:        console.log(`✅ Activité récente trouvée: ${recentActivity.length} entrées`);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getRecentActivityWithPeriod:', error);
../backend/src/controllers/plannedScheduleController.js:    console.error('Erreur lors de la récupération de la planification:', error);
../backend/src/controllers/structureController.js:        console.error('Erreur createStructure:', error);
../backend/src/controllers/structureController.js:        console.error('Erreur updateStructure:', error);
../backend/src/controllers/timeTrackingController.js:    console.log('🔍 Backend timeTracking params:', { startDate, endDate, userId, yearType });
../backend/src/controllers/timeTrackingController.js:      console.log('📅 Backend période:', { startDate, endDate });
../backend/src/controllers/timeTrackingController.js:    console.log(`📊 Backend trouvé: ${timeEntries.length} entrées pour la période`);
../backend/src/controllers/timeTrackingController.js:    console.error('❌ Erreur backend timeTracking:', error);
../backend/src/controllers/timeTrackingController.js:    console.error('Erreur lors de la récupération des entrées de temps:', error);
../backend/src/controllers/timeTrackingController.js:        console.error('Erreur quickTimeEntry:', error);
../backend/src/controllers/timeTrackingController.js:        console.error('Erreur getTimeStats:', error);
../backend/src/controllers/timeTrackingController.js:    console.error('Erreur getTeamSummary:', error);
../backend/src/controllers/schoolVacationController.js:    console.log('🔄 Début synchronisation forcée:', { zones, schoolYears, forceSync });
../backend/src/controllers/schoolVacationController.js:      console.log('🗑️ Suppression forcée de toutes les anciennes vacances...');
../backend/src/controllers/schoolVacationController.js:      console.log(`🗑️ ${deletedCount} anciennes vacances supprimées`);
../backend/src/controllers/schoolVacationController.js:          console.log(`📡 Récupération zone ${zone}, année ${schoolYear}...`);
../backend/src/controllers/schoolVacationController.js:          console.log(`📡 URL: ${apiUrl}`);
../backend/src/controllers/schoolVacationController.js:            console.warn(`⚠️ Réponse API vide pour zone ${zone}`);
../backend/src/controllers/schoolVacationController.js:          console.log(`📊 ${records.length} records reçus de l'API pour zone ${zone}`);
../backend/src/controllers/schoolVacationController.js:            console.warn(`⚠️ Aucun record pour zone ${zone}, année ${schoolYear}`);
../backend/src/controllers/schoolVacationController.js:    console.warn('⚠️ Record incomplet ignoré:', fields);
../backend/src/controllers/schoolVacationController.js:    console.log(`ℹ️ Ignoré (enseignants seulement):`, fields.description);
../backend/src/controllers/schoolVacationController.js:    console.log(`ℹ️ Ignoré (population inconnue: ${population}):`, fields.description);
../backend/src/controllers/schoolVacationController.js:    console.log(`ℹ️ Ignoré (zone: ${recordZones}, attendu: Zone ${zone}):`, fields.description);
../backend/src/controllers/schoolVacationController.js:              console.log(`✅ CRÉÉ: ${fields.description} (${fields.start_date} → ${fields.end_date})`);
../backend/src/controllers/schoolVacationController.js:              console.error(`❌ Erreur création ${fields.description}:`, createError.message);
../backend/src/controllers/schoolVacationController.js:          console.error(`❌ Erreur API zone ${zone}, année ${schoolYear}:`, apiError.message);
../backend/src/controllers/schoolVacationController.js:    console.log(`🎉 Synchronisation terminée:`, summary);
../backend/src/controllers/schoolVacationController.js:    console.log(`📋 Détails:`, results.map(r => `${r.zone}: ${r.period}`));
../backend/src/controllers/schoolVacationController.js:      console.error(`❌ Erreurs:`, errors);
../backend/src/controllers/schoolVacationController.js:    console.error('❌ Erreur globale synchronisation:', globalError);
../backend/src/controllers/hourPlanningController.js:    console.log('🎯 DEBUT upsertPlanning');
../backend/src/controllers/hourPlanningController.js:    console.log('👤 User:', req.user ? req.user.id : 'NON AUTHENTIFIE');
../backend/src/controllers/hourPlanningController.js:    console.log('📦 Body reçu:', req.body);
../backend/src/controllers/hourPlanningController.js:      console.error('❌ plan_date manquant');
../backend/src/controllers/hourPlanningController.js:      console.error('❌ planned_hours invalide:', planned_hours);
../backend/src/controllers/hourPlanningController.js:      console.error('❌ planned_hours hors limite:', hoursValue);
../backend/src/controllers/hourPlanningController.js:      console.error('❌ Utilisateur non authentifié');
../backend/src/controllers/hourPlanningController.js:    console.log('✅ Validation OK, tentative upsert...');
../backend/src/controllers/hourPlanningController.js:      console.log('🗑️ Suppression demandée (0 heures)');
../backend/src/controllers/hourPlanningController.js:      console.log('✅ Lignes supprimées:', deleted);
../backend/src/controllers/hourPlanningController.js:    console.log('📝 Données à insérer:', dataToInsert);
../backend/src/controllers/hourPlanningController.js:    console.log('✅ Planning sauvegardé:', planning.toJSON());
../backend/src/controllers/hourPlanningController.js:    console.error('❌ ERREUR UPSERT PLANNING:', error);
../backend/src/controllers/hourPlanningController.js:    console.error('📍 Stack trace:', error.stack);
../backend/src/app.js:    console.log(`[${dateISO}] ${method} ${path} - IP: ${clientIP}`);
../backend/src/app.js:    console.error(err.stack);
../backend/src/app.js:        console.log('Connexion à la base de données réussie.');
../backend/src/app.js:            console.log(`Serveur démarré sur le port ${config.port}`);
../backend/src/app.js:            console.log(`API disponible sur http://localhost:${config.port}/api`);
../backend/src/app.js:        console.error('Impossible de se connecter à la base de données:', error);
../backend/src/config/config.js:        logging: process.env.DB_LOGGING === 'true' ? console.log : false,
../backend/src/seeders/20250513143951-demo-users.js:    console.log('Structures trouvées:', structures);
../backend/src/seeders/20250513143951-demo-users.js:      console.log('ID Centre Paris:', parisId);
../backend/src/seeders/20250513143951-demo-users.js:      console.log('ID Centre Lyon:', lyonId);
../backend/src/seeders/20250513143951-demo-users.js:      console.log('ID Marseille:', marseilleId);
../backend/src/seeders/20250513143951-demo-users.js:      console.error('Erreur lors de la création des utilisateurs:', error);
../backend/src/seeders/20250513144000-demo-tasks.js:    console.log('Projets trouvés:', projects);
../backend/src/seeders/20250513144000-demo-tasks.js:      console.error('Erreur lors de la création des tâches:', error);

=== FICHIER: frontend/src/index.js ===
// src/index.js
import React from 'react';
import ReactDOM from 'react-dom/client';
import './index.css';
import App from './App';

// Configuration globale des erreurs
const setupErrorHandling = () => {
  // Gestion des erreurs non capturées
  window.addEventListener('error', (event) => {
    console.error('Erreur non capturée:', event.error);
    // Ici on pourrait envoyer les erreurs à un service de monitoring
  });

  // Gestion des promesses rejetées
  window.addEventListener('unhandledrejection', (event) => {
    console.error('Promesse rejetée non gérée:', event.reason);
    event.preventDefault(); // Empêche l'affichage dans la console
  });
};

// Configuration de l'environnement
const setupEnvironment = () => {
  // Variables d'environnement
  if (process.env.NODE_ENV === 'development') {
    console.log('🚀 Mode développement activé');
    console.log('API URL:', process.env.REACT_APP_API_URL || 'http://localhost:3001');
  }

  // Configuration PWA
  if ('serviceWorker' in navigator && process.env.NODE_ENV === 'production') {
    window.addEventListener('load', () => {
      navigator.serviceWorker.register('/sw.js')
        .then((registration) => {
          console.log('SW registered: ', registration);
        })
        .catch((registrationError) => {
          console.log('SW registration failed: ', registrationError);
        });
    });
  }
};

// Optimisations de performance
const setupPerformance = () => {
  // Web Vitals pour monitoring des performances
  if (process.env.NODE_ENV === 'production') {
    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {
      getCLS(console.log);
      getFID(console.log);
      getFCP(console.log);
      getLCP(console.log);
      getTTFB(console.log);
    });
  }
};

// Configuration de l'accessibilité
const setupAccessibility = () => {
  // React Axe pour l'accessibilité en développement
  if (process.env.NODE_ENV === 'development') {
    import('@axe-core/react').then((axe) => {
      axe.default(React, ReactDOM, 1000);
    });
  }
};

// Initialisation de l'application
const initializeApp = () => {
  setupErrorHandling();
  setupEnvironment();
  setupPerformance();
  setupAccessibility();

  const root = ReactDOM.createRoot(document.getElementById('root'));
  
  // Rendu avec gestion d'erreur de fallback
  try {
    root.render(
      <React.StrictMode>
        <App />
      </React.StrictMode>
    );
  } catch (error) {
    console.error('Erreur critique lors du rendu:', error);
    
    // Fallback d'urgence
    root.render(
      <div style={{
        minHeight: '100vh',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        backgroundColor: '#f3f4f6',
        fontFamily: 'system-ui, sans-serif'
      }}>
        <div style={{ textAlign: 'center', padding: '2rem' }}>
          <h1 style={{ color: '#dc2626', marginBottom: '1rem' }}>
            Erreur de chargement
          </h1>
          <p style={{ color: '#6b7280', marginBottom: '1.5rem' }}>
            L'application n'a pas pu se charger correctement
          </p>
          <button
            onClick={() => window.location.reload()}
            style={{
              backgroundColor: '#3b82f6',
              color: 'white',
              padding: '0.5rem 1rem',
              border: 'none',
              borderRadius: '0.375rem',
              cursor: 'pointer'
            }}
          >
            Recharger la page
          </button>
        </div>
      </div>
    );
  }
};

// Lancement de l'application
initializeApp();

// Hot Module Replacement pour le développement
if (module.hot && process.env.NODE_ENV === 'development') {
  module.hot.accept('./App', () => {
    console.log('🔄 Hot reload détecté');
    initializeApp();
  });
}
=== FIN frontend/src/index.js ===

=== FICHIER: frontend/src/stores/authStore.js ===
import { create } from 'zustand';
import { persist, createJSONStorage } from 'zustand/middleware';
import api from '../services/api';

export const useAuthStore = create(
  persist(
    (set, get) => ({
      // État
      user: null,
      token: null,
      isAuthenticated: false,
      loading: false,
      error: null,

// Connexion
      login: async (credentials) => {
  set({ loading: true, error: null });
  try {
    const response = await api.post('/auth/login', credentials);

    if (response.data.success && response.data.token) {
      const token = response.data.token;
      localStorage.setItem('authToken', token);

      // Recharge le user depuis /auth/me pour avoir la structure à jour
      await get().checkAuth();

      set({ token, isAuthenticated: true, loading: false, error: null });
      return { success: true };
    } else {
      throw new Error(response.data.message || 'Échec de la connexion');
    }
  } catch (error) {
    const errorMessage = error.response?.data?.message || error.message || 'Erreur de connexion';
    set({ 
      error: errorMessage, 
      loading: false,
      user: null,
      token: null,
      isAuthenticated: false
    });
    return { success: false, error: errorMessage };
  }
      },

// Déconnexion
      logout: () => {
        // Nettoyer le stockage local
        localStorage.removeItem('authToken');
        localStorage.removeItem('user');
        
        // Réinitialiser l'état
        set({ 
          user: null, 
          token: null, 
          isAuthenticated: false, 
          error: null,
          loading: false
        });
        
        // Rediriger vers la page de connexion
        window.location.href = '/login';
      },
      
// Vérification de l'authentification
      checkAuth: async () => {
        const token = localStorage.getItem('authToken');
        
        if (!token) {
          set({ 
            user: null, 
            token: null, 
            isAuthenticated: false,
            loading: false
          });
          return;
        }

        set({ loading: true });

        try {
          const response = await api.get('/auth/me');
          
          if (response.data.success) {
            set({ 
              user: response.data.data, 
              token, 
              isAuthenticated: true,
              loading: false,
              error: null
            });
          } else {
            get().logout();
          }
        } catch (error) {
          console.error('Erreur vérification auth:', error);
          get().logout();
        }
      },

// Mise à jour de l'utilisateur
      updateUser: (userData) => {
        set((state) => ({
          user: { ...state.user, ...userData }
        }));
      },

// Mise à jour du type d'année
updateYearType: async (yearType) => {
  console.log('🔄 AuthStore: Mise à jour yearType vers:', yearType);
  
  try {
    const response = await api.put('/users/profile', { year_type: yearType });
    console.log('📡 Réponse API:', response.data);
    
    if (response.data.success) {
      set(state => ({
        user: { ...state.user, year_type: yearType }
      }));
      
      const currentUser = get().user;
      const updatedUser = { ...currentUser, year_type: yearType };
      localStorage.setItem('user', JSON.stringify(updatedUser));
      
      console.log('✅ User mis à jour:', updatedUser);
      return { success: true };
    }
  } catch (error) {
    console.error('❌ Erreur mise à jour type d\'année:', error);
    return { success: false, error: error.response?.data?.message || error.message };
  }
},

      clearError: () => set({ error: null }),

      // Getters
      isAdmin: () => get().user?.role === 'admin',
      isDirector: () => get().user?.role === 'director',
      isAnimator: () => get().user?.role === 'animator',
      
      hasPermission: (permission) => {
        const user = get().user;
        if (!user) return false;
        
        // Les admins ont toutes les permissions
        if (user.role === 'admin') return true;
        
        // Logique des permissions spécifiques selon les rôles
        const permissions = {
          director: ['manage_team', 'view_reports', 'create_projects'],
          animator: ['track_time', 'view_own_data']
        };
        
        return permissions[user.role]?.includes(permission) || false;
      }
    }),
    {
      name: 'auth-storage',
      storage: createJSONStorage(() => localStorage),
      partialize: (state) => ({ 
        user: state.user, 
        token: state.token, 
        isAuthenticated: state.isAuthenticated 
      }),
    }
  )
);
=== FIN frontend/src/stores/authStore.js ===

=== FICHIER: frontend/src/stores/timeStore.js ===
// Store pour le suivi du temps
import { create } from 'zustand';
import api from '../services/api';
import { calculateWeeklyStats, 
  calculateMonthlyStats,
  calculateTotalHours, 
  getTodayStatus,
} from '../utils/timeCalculations';

export const useTimeStore = create((set, get) => ({
  todayEntries: [],
  timeHistory: [],
  processedHistory: [], 
  monthlyReport: {},  
  stats: {},
  weeklyStats: {},
  monthlyStats: {},
  loading: false,
  error: null,
  lastUpdate: null,
  teamSummary: [],
  teamLoading: false,
    // Cache simple et efficace
  _processedCache: null,
  _cacheKey: null,
  _cacheTime: 0,

  // Actions principales avec /today
  fetchTodayEntries: async (userId = null) => {
    set({ loading: true, error: null });
    
    try {
      const params = new URLSearchParams();
      if (userId) params.append('userId', userId);
      
      const response = await api.get(`/time-tracking/today?${params}`);
      
      if (response.data.success) {
        set({ 
          todayEntries: response.data.data || [], 
          loading: false,
          lastUpdate: new Date().toISOString()
        });
        return { success: true, data: response.data.data };
      } else {
        throw new Error(response.data.message || 'Erreur lors du chargement');
      }
    } catch (error) {
      console.warn('API today non disponible, fallback...', error.response?.status);
      
      // FALLBACK
      if (error.response?.status === 404) {
        return get().fetchTodayEntriesLegacy(userId);
      }
      
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  // fallback
  fetchTodayEntriesLegacy: async (userId = null) => {
    try {
      const today = new Date().toISOString().split('T')[0];
      const params = new URLSearchParams({
        startDate: today,
        endDate: today
      });
      
      if (userId) params.append('userId', userId);
      
      const response = await api.get(`/time-tracking/range?${params}`);
      
      if (response.data.success) {
        set({ 
          todayEntries: response.data.data || [], 
          loading: false,
          lastUpdate: new Date().toISOString()
        });
        return { success: true, data: response.data.data };
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  // Actions rapides optimisées
  clockIn: async (taskId = null, comment = '') => {
    return get().performAction('/time-tracking/clock-in', 'arrival', { taskId, comment });
  },

  clockOut: async (comment = '') => {
    return get().performAction('/time-tracking/clock-out', 'departure', { comment });
  },

  startBreak: async (comment = '') => {
    return get().performAction('/time-tracking/break-start', 'break_start', { comment });
  },

  endBreak: async (comment = '') => {
    return get().performAction('/time-tracking/break-end', 'break_end', { comment });
  },

  // utilitaire pour éviter la duplication
  performAction: async (endpoint, fallbackType, { taskId = null, comment = '' }) => {
    set({ error: null });
    
    try {
      const payload = {};
      if (taskId) payload.task_id = taskId;
      if (comment) payload.comment = comment.trim();

      const response = await api.post(endpoint, payload);
      
      if (response.data.success) {
        await get().fetchTodayEntries();
        return { success: true, data: response.data.data };
      } else {
        throw new Error(response.data.message || 'Erreur lors du pointage');
      }
    } catch (error) {
      // ✅ FALLBACK vers méthode générique
      if (error.response?.status === 404) {
        return get().recordTimeEntry(fallbackType, taskId, comment);
      }
      
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage });
      return { success: false, error: errorMessage };
    }
  },

  // Stats avec fallback
  fetchStats: async (days = 7, userId = null) => {
    set({ loading: true, error: null });
    
    try {
      const params = new URLSearchParams({ days: days.toString() });
      if (userId) params.append('userId', userId);
      
      const response = await api.get(`/time-tracking/stats?${params}`);
      
      if (response.data.success) {
        set({ 
          stats: response.data.data,
          loading: false,
          lastUpdate: new Date().toISOString()
        });
        return { success: true, data: response.data.data };
      }
    } catch (error) {
      console.warn('API stats non disponible, calcul local...', error.response?.status);
      
      // FALLBACK vers calcul local
      if (error.response?.status === 404) {
        await get().fetchTimeHistory(days, userId);
        return { success: true, data: get().stats };
      }
      
      set({ 
        error: error.response?.data?.message || error.message,
        loading: false 
      });
      return { success: false, error: error.message };
    }
  },

  // Rapport mensuel
  fetchMonthlyReport: async (month = null, year = null, userId = null) => {
    set({ loading: true, error: null });
    
    try {
      const params = new URLSearchParams();
      if (month) params.append('month', month);
      if (year) params.append('year', year);
      if (userId) params.append('userId', userId);
      
      const response = await api.get(`/time-tracking/report/monthly?${params}`);
      
      if (response.data.success) {
        set({ 
          monthlyReport: response.data.data,
          loading: false
        });
        return { success: true, data: response.data.data };
      }
    } catch (error) {
      set({ 
        error: error.response?.data?.message || error.message,
        loading: false 
      });
      return { success: false, error: error.message };
    }
  },

  // Historique optimisé
  fetchTimeHistory: async (days = 30, userId = null) => {
    set({ loading: true, error: null });
    
    try {
        const today = new Date();
        const endDateObj = new Date(today);
        endDateObj.setDate(today.getDate() + 1);
        const endDate = endDateObj.toISOString().split('T')[0];
        const startDate = new Date(today - days * 24 * 60 * 60 * 1000)
        .toISOString().split('T')[0];
      
      const params = new URLSearchParams({ startDate, endDate });
      if (userId) params.append('userId', userId);
      
      const response = await api.get(`/time-tracking/range?${params}`);
      
      if (response.data.success) {
        const entries = response.data.data || [];
        const processedData = calculateTotalHours(entries);
        
        set({ 
          timeHistory: entries,
          processedHistory: processedData,
          loading: false,
          lastUpdate: new Date().toISOString(),
          _processedCache: null,
          _cacheKey: null,
          _cacheTime: 0
        });
        
        // Calculs automatiques
        get().calculateStats(entries);
        return { success: true, data: entries };
      } else {
        throw new Error(response.data.message || 'Erreur lors du chargement');
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

// Fonction pour récupérer le résumé d'équipe
fetchTeamSummary: async (days = 30, structureId = null) => {
  set({ teamLoading: true, error: null });
  
  try {
    // ✅ CORRECTION: Utiliser le bon nom de paramètre
    const params = new URLSearchParams();
    
    // Mapper les périodes textuelles vers des nombres de jours
    let daysNumber = 30; // Par défaut
    switch (days) {
      case 'current_week':
      case 'previous_week':
        daysNumber = 7;
        break;
      case 'current_month':
      case 'previous_month':
      case 'last_30_days':
        daysNumber = 30;
        break;
      case 'current_quarter':
      case 'previous_quarter':
        daysNumber = 90;
        break;
      case 'current_year':
      case 'previous_year':
        daysNumber = 365;
        break;
      default:
        daysNumber = parseInt(days) || 30;
    }
    
    params.append('days', daysNumber.toString());
    if (structureId) params.append('structureId', structureId);
    
    console.log('📡 Requête team-summary avec params:', params.toString());
    
    const response = await api.get(`/time-tracking/team-summary?${params}`);
    console.log('📊 Réponse brute team-summary:', response.data);
    
    if (response.data.success) {
      set({ 
        teamSummary: response.data.data,
        teamLoading: false
      });
      return { success: true, data: response.data.data };
    } else {
      throw new Error(response.data.message || 'Erreur lors du chargement');
    }
  } catch (error) {
    console.error('❌ Erreur fetchTeamSummary:', error);
    const errorMessage = error.response?.data?.message || error.message;
    set({ error: errorMessage, teamLoading: false });
    return { success: false, error: errorMessage };
  }
},

// Fonction d'export des données d'équipe
exportTeamData: async (format = 'csv', filters = {}) => {
  try {
    const params = new URLSearchParams(filters);
    params.append('format', format);
    
    const response = await api.get(`/time-tracking/team-export?${params}`, {
      responseType: 'blob'
    });
    
    // Créer le téléchargement
    const url = window.URL.createObjectURL(new Blob([response.data]));
    const link = document.createElement('a');
    link.href = url;
    link.setAttribute('download', `team_summary_${new Date().toISOString().split('T')[0]}.${format}`);
    document.body.appendChild(link);
    link.click();
    link.remove();
    window.URL.revokeObjectURL(url);
    
    return { success: true };
  } catch (error) {
    const errorMessage = error.response?.data?.message || error.message;
    set({ error: errorMessage });
    return { success: false, error: errorMessage };
  }
},

// Enregistrer une entrée de temps
  recordTimeEntry: async (type, taskId = null, comment = '') => {
    set({ error: null });
    
    try {
      const payload = {
        tracking_type: type,
        date_time: new Date().toISOString(),
        validated: false,
        comment: comment.trim()
      };

      if (taskId) payload.task_id = taskId;

      const response = await api.post('/time-tracking', payload);
      
      if (response.data.success) {
        await get().fetchTodayEntries();        
        //  Invalider le cache
        set({
          _processedCache: null,
          _cacheKey: null,
          _cacheTime: 0
        });
        return { success: true, data: response.data.data };
      } else {
        throw new Error(response.data.message || 'Erreur lors du pointage');
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage });
      return { success: false, error: errorMessage };
    }
  },

// Mettre à jour une entrée de temps
  updateTimeEntry: async (entryId, updateData) => {
    try {
      const response = await api.put(`/time-tracking/${entryId}`, updateData);
      
      if (response.data.success) {
        await Promise.all([
          get().fetchTodayEntries(),
          get().fetchTimeHistory()
        ]);
        return { success: true, data: response.data.data };
      } else {
        throw new Error(response.data.message || 'Erreur lors de la mise à jour');
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage });
      return { success: false, error: errorMessage };
    }
  },
// Supprimer une entrée de temps
  deleteTimeEntry: async (entryId) => {
    try {
      const response = await api.delete(`/time-tracking/${entryId}`);
      
      if (response.data.success) {
        await Promise.all([
          get().fetchTodayEntries(),
          get().fetchTimeHistory()
        ]);
        return { success: true };
      } else {
        throw new Error(response.data.message || 'Erreur lors de la suppression');
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage });
      return { success: false, error: errorMessage };
    }
  },

  // Calculs consolidés (utilise les utils)
  calculateStats: (entries) => {
  const weeklyStats = calculateWeeklyStats(entries);
  const monthlyStats = calculateMonthlyStats(entries);
  
  set({ weeklyStats, monthlyStats });
  },

  // Getters (utilise les utils)
  getTodayStatus: () => getTodayStatus(get().todayEntries),
  
  // getProcessedHistory: () => calculateTotalHours(get().timeHistory),
  getProcessedHistory: () => {
    const { timeHistory, _processedCache, _cacheKey, _cacheTime } = get();
    const currentKey = timeHistory.length > 0 ? 
      `${timeHistory.length}-${timeHistory[0]?.id}-${timeHistory[timeHistory.length-1]?.id || 'new'}` : 
      'empty';
    const now = Date.now();
    
    // Cache simple mais efficace
    if (_cacheKey === currentKey && now - _cacheTime < 2 * 60 * 1000) {
      return _processedCache;
    }
    
    // ✅ Calculer et cacher
    const result = calculateTotalHours(timeHistory);
    set({
      _processedCache: result,
      _cacheKey: currentKey,
      _cacheTime: now
    });
    
    return result;
  },
  
  canPerformAction: (actionType) => {
    const todayStatus = get().getTodayStatus();
    
    const rules = {
      arrival: !todayStatus.arrival,
      break_start: todayStatus.arrival && !todayStatus.breakStart && !todayStatus.departure,
      break_end: todayStatus.breakStart && !todayStatus.breakEnd && !todayStatus.departure,
      departure: todayStatus.arrival && !todayStatus.departure && 
                (!todayStatus.breakStart || todayStatus.breakEnd)
    };
    
    return rules[actionType] || false;
  },

  getCurrentWorkingTime: () => {
    const todayStatus = get().getTodayStatus();
    
    if (!todayStatus.arrival) return 0;
    
    const now = new Date();
    const arrivalTime = new Date(todayStatus.arrival.date_time);
    let workingMinutes = (now - arrivalTime) / (1000 * 60);
    
    // Déduire les pauses
    if (todayStatus.breakStart && !todayStatus.breakEnd) {
      const breakStartTime = new Date(todayStatus.breakStart.date_time);
      workingMinutes -= (now - breakStartTime) / (1000 * 60);
    }
    
    if (todayStatus.breakStart && todayStatus.breakEnd) {
      const breakStartTime = new Date(todayStatus.breakStart.date_time);
      const breakEndTime = new Date(todayStatus.breakEnd.date_time);
      workingMinutes -= (breakEndTime - breakStartTime) / (1000 * 60);
    }
    
    return Math.max(0, workingMinutes / 60);
  },

  // Actions utilitaires
  clearError: () => set({ error: null }),

  reset: () => set({
    todayEntries: [],
    timeHistory: [],
    processedHistory: [],
    monthlyReport: {},
    stats: {},
    weeklyStats: {},
    monthlyStats: {},
    loading: false,
    error: null,
    lastUpdate: null,
    _processedCache: null,
    _cacheKey: null,
    _cacheTime: 0
  })

}));


=== FIN frontend/src/stores/timeStore.js ===

=== FICHIER: frontend/src/stores/planningStore.js ===
import { create } from 'zustand';
import api from '../services/api';
import { getYearBounds, YEAR_TYPES } from '../utils/dateUtils'; 

export const usePlanningStore = create((set, get) => ({
  yearlyPlanning: {
    annual_objective: 0,
    total_planned: 0,
    remaining_hours: 0,
    completion_rate: 0,
    planning: []
  },
  selectedYear: new Date().getFullYear(),
  loading: false,
  error: null,
  
  // Support du yearType
  fetchYearlyPlanning: async (userId = null, startDate = null, endDate = null) => {
    set({ loading: true, error: null });
    
    try {
      let url = '/hour-planning/yearly';
      const params = new URLSearchParams();
      
      if (userId) params.append('userId', userId);
      if (startDate) params.append('startDate', startDate);
      if (endDate) params.append('endDate', endDate);
      
      if (params.toString()) {
        url += '?' + params.toString();
      }
      
      const response = await api.get(url);
      
      if (response.data.success) {
        set({ 
          yearlyPlanning: response.data.data,
          loading: false 
        });
        return { success: true, data: response.data.data };
      }
    } catch (error) {
      console.error('Erreur planningStore:', error);
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage, loading: false });
      return { success: false, error: errorMessage };
    }
  },

  upsertPlanning: async (planningData) => {
    try {
      const response = await api.post('/hour-planning/upsert', planningData);
      
      if (response.data.success) {
        // ✅ CORRIGER : Recharger les données après modification
        await get().fetchYearlyPlanning();
        return { success: true, data: response.data.data };
      }
    } catch (error) {
      const errorMessage = error.response?.data?.message || error.message;
      set({ error: errorMessage });
      return { success: false, error: errorMessage };
    }
  },

  setSelectedYear: (year) => {
    set({ selectedYear: year });
  },

  clearError: () => set({ error: null })
}));
=== FIN frontend/src/stores/planningStore.js ===

=== FICHIER: frontend/src/stores/schoolVacationStore.js ===
import { create } from 'zustand';
import api from '../services/api';

export const useSchoolVacationStore = create((set, get) => ({
  vacations: [],
  loading: false,
  error: null,
  selectedZone: 'B', // Zone par défaut
  availableZones: ['A', 'B', 'C'], //  Zones disponibles

  // ✅ MODIFIER : fetchVacations pour supporter zone null = toutes les zones
  fetchVacations: async (startDate, endDate, zone = null) => {
    set({ loading: true, error: null });
    
    try {
      const params = new URLSearchParams();
      
      // ✅ NOUVEAU : Si zone = null, on ne filtre pas par zone
      if (zone) {
        params.append('zone', zone);
      }
      
      if (startDate && endDate) {
        const start = new Date(startDate);
        const end = new Date(endDate);
        
        if (startDate.includes('-09-') || endDate.includes('-08-')) {
          const schoolYear = start.getFullYear();
          const schoolYearStr = `${schoolYear}-${schoolYear + 1}`;
          params.append('schoolYear', schoolYearStr);
          console.log('🎓 Année scolaire détectée:', schoolYearStr);
        } else {
          const year = start.getFullYear();
          params.append('schoolYear', `${year}-${year + 1}`);
          console.log('📅 Année civile convertie en scolaire:', `${year}-${year + 1}`);
        }
      }
      
      console.log('🏖️ Appel API vacances:', { zone: zone || 'TOUTES', startDate, endDate, params: params.toString() });
      
      const response = await api.get(`/school-vacations/calendar?${params}`);
      
      if (response.data.success) {
        console.log('✅ Vacances reçues:', response.data.data);
        set({ 
          vacations: response.data.data,
          loading: false 
        });
        return response.data.data;
      }
    } catch (error) {
      console.error('❌ Erreur chargement vacances:', error);
      set({ 
        error: error.response?.data?.message || error.message,
        loading: false 
      });
      return [];
    }
  },

  // ✅ NOUVEAU : Fonctions pour filtrer les vacances selon la zone sélectionnée
  getVacationsForZone: (zone) => {
    const vacations = get().vacations;
    if (!zone) return vacations; // Toutes les zones
    return vacations.filter(v => v.extendedProps?.zone === zone);
  },

  isVacationDay: (date, zone = null) => {
    const vacations = zone ? get().getVacationsForZone(zone) : get().vacations;
    if (!vacations || vacations.length === 0) return false;
    
    const checkDate = new Date(date);
    checkDate.setHours(0, 0, 0, 0);
    
    return vacations.some(vacation => {
      const startDateStr = vacation.extendedProps?.realStartDate || vacation.start_date || vacation.start;
      const endDateStr = vacation.extendedProps?.realEndDate || vacation.end_date || vacation.end;
      
      const start = new Date(startDateStr);
      start.setHours(0, 0, 0, 0);
      
      const end = new Date(endDateStr);
      end.setHours(23, 59, 59, 999);
      
      return checkDate >= start && checkDate <= end;
    });
  },

  getVacationInfo: (date, zone = null) => {
    const vacations = zone ? get().getVacationsForZone(zone) : get().vacations;
    if (!vacations || vacations.length === 0) return null;
    
    const checkDate = new Date(date);
    checkDate.setHours(0, 0, 0, 0);
    
    return vacations.find(vacation => {
      const startDateStr = vacation.extendedProps?.realStartDate || vacation.start_date || vacation.start;
      const endDateStr = vacation.extendedProps?.realEndDate || vacation.end_date || vacation.end;
      
      const start = new Date(startDateStr);
      start.setHours(0, 0, 0, 0);
      
      const end = new Date(endDateStr);
      end.setHours(23, 59, 59, 999);
      
      return checkDate >= start && checkDate <= end;
    });
  },

  // ✅ NOUVEAU : Setters pour la zone sélectionnée
  setZone: (zone) => set({ selectedZone: zone }),
  clearError: () => set({ error: null })
}));
=== FIN frontend/src/stores/schoolVacationStore.js ===

=== FICHIER: frontend/src/components/dashboard/DirectorDashboard.jsx ===
import React, { useState, useEffect, useCallback } from 'react';
import { 
  Users, 
  Clock, 
  Calendar, 
  TrendingUp, 
  Activity,
  Building,
  FileText,
  Settings,
  Search,
  PlayCircle,
  PauseCircle,
  StopCircle,
  MapPin,
  Download,
  Plus,
  Filter,
  CheckCircle,
  AlertCircle,
  Target,
  Timer,
  BarChart3
} from 'lucide-react';
import { calculateTotalHours, formatTime, calculatePeriodDates, getPerformanceStatus, getMostProductiveDay, getConsistencyRating, calculateVariance, getWorkDayStatus } from '../../utils/timeCalculations';
import { useAuthStore } from '../../stores/authStore';
import { useAdminStore } from '../../stores/adminStore';
import { useTimeStore } from '../../stores/timeStore';
import Card from '../common/Card';
import StatsCard from '../common/StatsCard';
import Button from '../common/Button';
import Input from '../common/Input';
import Modal from '../common/Modal';
import YearlyPlanningRoadmap from '../common/YearlyPlanningRoadmap';
import RealizedHoursRoadmap from '../common/RealizedHoursRoadmap'; 
import YearTypeSelector from '../common/YearTypeSelector'; 
import CreateUserForm from '../forms/CreateUserForm';
import EditUserForm from '../forms/EditUserForm';
import CreateProjectForm from '../forms/CreateProjectForm';
import VacationTester from '../common/VacationTester';
import QuickTimeTrackingIcons from '../common/QuickTimeTrackingIcons';


// ===== CONSTANTES =====
const PERIOD_OPTIONS = [
  { value: 'current_week', label: 'Semaine en cours', description: 'Du lundi au dimanche' },
  { value: 'current_month', label: 'Mois en cours', description: 'Du 1er au dernier jour' },
  { value: 'current_quarter', label: 'Trimestre en cours', description: 'Trimestre actuel' },
  { value: 'current_year', label: 'Année en cours', description: 'De janvier à décembre' },
  { value: 'previous_week', label: 'Semaine précédente', description: 'La semaine passée' },
  { value: 'previous_month', label: 'Mois précédent', description: 'Le mois passé' },
  { value: 'previous_quarter', label: 'Trimestre précédent', description: 'Le trimestre passé' },
  { value: 'previous_year', label: 'Année précédente', description: 'L\'année passée' },
  { value: 'last_30_days', label: '30 derniers jours', description: 'Période glissante' },
  { value: 'last_90_days', label: '90 derniers jours', description: 'Période glissante' },
  { value: 'custom', label: 'Période personnalisée', description: 'Choisir les dates' }
];

const DirectorDashboard = () => {
  
  // ===== HOOKS ET STORES =====
  const { user } = useAuthStore();
  const { 
    users = [], 
    structures = [], 
    loading: adminLoading,
    fetchUsers,
    fetchStructures,
    toggleUserStatus,
    createUser
  } = useAdminStore();
  
  const { 
    todayEntries = [], 
    timeHistory = [],
    processedHistory = [],
    loading: timeLoading,
    fetchTodayEntries,
    fetchTimeHistory,
    fetchMonthlyReport,
    clockIn,
    clockOut,
    startBreak,
    endBreak,
    weeklyStats,
    monthlyStats,
    fetchTeamSummary
  } = useTimeStore();

  // ===== ÉTATS LOCAUX =====
  const [activeView, setActiveView] = useState('dashboard');
  const [dateRange, setDateRange] = useState('7');
  const [searchTerm, setSearchTerm] = useState('');
  const [showAllAnimators, setShowAllAnimators] = useState(false);
  const [showAllActivity, setShowAllActivity] = useState(false);
    const [showCreateProjectModal, setShowCreateProjectModal] = useState(false);
  const [recentActivityLimit, setRecentActivityLimit] = useState(30);
  
  // États pour la gestion d'équipe
  const [selectedAnimator, setSelectedAnimator] = useState('all');
  const [teamDateRange, setTeamDateRange] = useState('current_month');
  const [actionLoading, setActionLoading] = useState(null);
  const [teamData, setTeamData] = useState([]);
  const [showEditUserModal, setShowEditUserModal] = useState(false);
  const [selectedUser, setSelectedUser] = useState(null);
  const [showCreateAnimatorModal, setShowCreateAnimatorModal] = useState(false);

  // États pour les statistiques avancées
  const [selectedAnimatorStats, setSelectedAnimatorStats] = useState(null);
  const [animatorStatsLoading, setAnimatorStatsLoading] = useState(false);
  const [selectedPeriodForStats, setSelectedPeriodForStats] = useState('current_month');
  const [showAnimatorStatsModal, setShowAnimatorStatsModal] = useState(false);
  const [comparisonData, setComparisonData] = useState(null);
  const [showComparison, setShowComparison] = useState(false);
  const [customDateRange, setCustomDateRange] = useState({ start: '', end: '' });

  // État pour l'heure actuelle
  const [currentTime, setCurrentTime] = useState(
    new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })
  );

  // ===== EFFETS =====
  useEffect(() => {
    const timer = setInterval(() => {
      setCurrentTime(new Date().toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }));
    }, 60000);
    return () => clearInterval(timer);
  }, []);

  // Chargement des données
  const loadData = useCallback(async () => {
    try {
      if (fetchUsers) await fetchUsers();
      if (fetchStructures) await fetchStructures();
      if (fetchTodayEntries) await fetchTodayEntries();
      if (user?.id) {
        await fetchTimeHistory(30, user.id);
        await fetchMonthlyReport(null, null, user.id);
      }
    } catch (error) {
      console.error('Erreur lors du chargement des données:', error);
    }
  }, [fetchUsers, fetchStructures, fetchTodayEntries, fetchTimeHistory, fetchMonthlyReport, user?.id]);

  useEffect(() => {
    if (user?.id) {
      loadData();
    }
  }, [user?.id, loadData]);

  // Charger les données d'équipe au changement de période
  useEffect(() => {
    if (activeView === 'team') {
      loadTeamData();
    }
  }, [teamDateRange, activeView, user?.structure_id]);

  // ===== FONCTIONS UTILITAIRES =====
  
  const calculatePeriodDates = (period, customStart = null, customEnd = null) => {
    const now = new Date();
    const currentYear = now.getFullYear();
    const currentMonth = now.getMonth();
    const currentQuarter = Math.floor(currentMonth / 3);

    switch (period) {
      case 'current_week':
        const monday = new Date(now);
        monday.setDate(now.getDate() - now.getDay() + 1);
        const sunday = new Date(monday);
        sunday.setDate(monday.getDate() + 6);
        return {
          start: monday.toISOString().split('T')[0],
          end: sunday.toISOString().split('T')[0],
          label: 'Semaine en cours'
        };

      case 'current_month':
        return {
          start: new Date(currentYear, currentMonth, 1).toISOString().split('T')[0],
          end: new Date(currentYear, currentMonth + 1, 0).toISOString().split('T')[0],
          label: 'Mois en cours'
        };

      case 'current_quarter':
        const quarterStart = new Date(currentYear, currentQuarter * 3, 1);
        const quarterEnd = new Date(currentYear, (currentQuarter + 1) * 3, 0);
        return {
          start: quarterStart.toISOString().split('T')[0],
          end: quarterEnd.toISOString().split('T')[0],
          label: 'Trimestre en cours'
        };

      case 'current_year':
        return {
          start: new Date(currentYear, 0, 1).toISOString().split('T')[0],
          end: new Date(currentYear, 11, 31).toISOString().split('T')[0],
          label: 'Année en cours'
        };

      case 'previous_week':
        const prevWeekMonday = new Date(now);
        prevWeekMonday.setDate(now.getDate() - now.getDay() - 6);
        const prevWeekSunday = new Date(prevWeekMonday);
        prevWeekSunday.setDate(prevWeekMonday.getDate() + 6);
        return {
          start: prevWeekMonday.toISOString().split('T')[0],
          end: prevWeekSunday.toISOString().split('T')[0],
          label: 'Semaine précédente'
        };

      case 'previous_month':
        const prevMonth = currentMonth === 0 ? 11 : currentMonth - 1;
        const prevYear = currentMonth === 0 ? currentYear - 1 : currentYear;
        return {
          start: new Date(prevYear, prevMonth, 1).toISOString().split('T')[0],
          end: new Date(prevYear, prevMonth + 1, 0).toISOString().split('T')[0],
          label: 'Mois précédent'
        };

      case 'last_30_days':
        const thirty = new Date(now);
        thirty.setDate(now.getDate() - 30);
        return {
          start: thirty.toISOString().split('T')[0],
          end: now.toISOString().split('T')[0],
          label: '30 derniers jours'
        };

      case 'custom':
        return {
          start: customStart,
          end: customEnd,
          label: 'Période personnalisée'
        };

      default:
        return calculatePeriodDates('current_month');
    }
  };

const calculatePeriodObjective = (period, weeklyHours, annualHours) => {
  switch (period) {
    case 'current_week':
    case 'previous_week':
      return weeklyHours || 35;
    case 'current_month':
    case 'previous_month':
      return (weeklyHours || 35) * 4.33;
    case 'current_quarter':
    case 'previous_quarter':
      return (weeklyHours || 35) * 13;
    case 'current_year':
    case 'previous_year':
      return annualHours || ((weeklyHours || 35) * 52);
    case 'last_30_days':
      return (weeklyHours || 35) * 4.33;
    case 'last_90_days':
      return (weeklyHours || 35) * 13;
    default:
      return (weeklyHours || 35) * 4.33;
  }
};

  const formatTime = (dateTime) => {
    return new Date(dateTime).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' });
  };

  const formatDecimalToTime = (decimal) => {
    const hours = Math.floor(decimal);
    const minutes = Math.round((decimal - hours) * 60);
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
  };

  const calculateVariance = (numbers) => {
    if (numbers.length === 0) return 0;
    const mean = numbers.reduce((sum, num) => sum + num, 0) / numbers.length;
    const squaredDiffs = numbers.map(num => Math.pow(num - mean, 2));
    return squaredDiffs.reduce((sum, diff) => sum + diff, 0) / numbers.length;
  };

  const getPerformanceStatus = (completionRate) => {
    if (completionRate >= 100) return { label: 'Objectif atteint', color: 'green', icon: CheckCircle };
    if (completionRate >= 90) return { label: 'Très bien', color: 'blue', icon: CheckCircle };
    if (completionRate >= 75) return { label: 'Satisfaisant', color: 'yellow', icon: AlertCircle };
    if (completionRate >= 60) return { label: 'À améliorer', color: 'orange', icon: AlertCircle };
    return { label: 'Insuffisant', color: 'red', icon: AlertCircle };
  };

  const getMostProductiveDay = (workingDays) => {
    const completeDays = workingDays.filter(day => day.isComplete);
    if (completeDays.length === 0) return 'Aucun';
    
    const maxDay = completeDays.reduce((max, day) => 
      day.hoursWorked > max.hoursWorked ? day : max
    );
    
    return `${maxDay.dayName} (${maxDay.hoursWorked}h)`;
  };

  const getConsistencyRating = (score) => {
    if (score >= 90) return { label: 'Très régulier', color: 'green' };
    if (score >= 75) return { label: 'Régulier', color: 'blue' };
    if (score >= 60) return { label: 'Moyennement régulier', color: 'yellow' };
    return { label: 'Irrégulier', color: 'red' };
  };

  const getWorkDayStatus = (arrival, departure, breakStart, breakEnd) => {
    if (!arrival) return 'absent';
    if (arrival && !departure) return 'en_cours';
    if (arrival && departure) return 'complet';
    return 'incomplet';
  };

// ===== FONCTIONS UTILITAIRES POUR PAUSES MULTIPLES =====

// Récupère toutes les paires de pauses (début/fin) pour la journée
const getPauses = (entries) => {
  const pauses = [];
  let currentBreakStart = null;

  entries
    .filter(e => e.tracking_type === 'break_start' || e.tracking_type === 'break_end')
    .sort((a, b) => new Date(a.date_time) - new Date(b.date_time))
    .forEach(entry => {
      if (entry.tracking_type === 'break_start') {
        currentBreakStart = entry;
      } else if (entry.tracking_type === 'break_end' && currentBreakStart) {
        pauses.push({ start: currentBreakStart, end: entry });
        currentBreakStart = null;
      }
    });

  // Si une pause a commencé mais pas terminée
  if (currentBreakStart) {
    pauses.push({ start: currentBreakStart, end: null });
  }

  return pauses;
};

// Détermine si une pause est en cours (dernier break_start sans break_end)
const isOnBreak = (entries) => {
  const pauses = getPauses(entries);
  return pauses.length > 0 && pauses[pauses.length - 1].end === null;
};

// Calcule le temps travaillé hors pauses (toutes les pauses)
const getWorkedTimeWithMultipleBreaks = () => {
  if (status.arrival && status.departure) {
    const start = new Date(status.arrival.date_time);
    const end = new Date(status.departure.date_time);
    let totalMinutes = (end - start) / (1000 * 60);

    // Soustraire toutes les pauses terminées
    getPauses(myTodayEntries).forEach(pause => {
      if (pause.start && pause.end) {
        const breakStart = new Date(pause.start.date_time);
        const breakEnd = new Date(pause.end.date_time);
        totalMinutes -= (breakEnd - breakStart) / (1000 * 60);
      }
    });

    const hours = Math.floor(totalMinutes / 60);
    const minutes = Math.round(totalMinutes % 60);
    return `${hours}h${minutes.toString().padStart(2, '0')}`;
  }
  return '--h--';
};

  // ===== GESTIONNAIRES D'ÉVÉNEMENTS =====
  const handleEditUser = (user) => {
    setSelectedUser(user);
    setShowEditUserModal(true);
  };

  const handleUserUpdated = () => {
    setShowEditUserModal(false);
    setSelectedUser(null);
    loadData();
  };

  const handleAnimatorCreated = useCallback(async () => {
    setShowCreateAnimatorModal(false);
    await loadData();
    if (activeView === 'team') {
      await loadTeamData();
    }
  }, [loadData, activeView]);

 
const loadTeamData = async () => {
  if (!user?.structure_id) return;
  
  try {
    console.log('🔄 Chargement données équipe pour structure:', user.structure_id);
    
    const result = await fetchTeamSummary(teamDateRange, user.structure_id);
    console.log('📊 Réponse API team-summary:', result);
    
    if (result.success && result.data) {
      const apiData = result.data;
      console.log('📋 Données API reçues:', apiData);
      
      // ✅ CORRECTION: Récupérer les données utilisateurs depuis la bonne structure
      const usersFromAPI = apiData.users || [];
      console.log('👥 Utilisateurs depuis API:', usersFromAPI);
      
      // Créer un map des données de travail par user ID
      const workDataMap = new Map();
      usersFromAPI.forEach(userData => {
        workDataMap.set(userData.user.id, userData);
      });
      
      console.log('🗺️ Map des données de travail:', workDataMap);
      
      // ✅ FUSIONNER avec tous les animateurs de la structure
      const allAnimatorsData = myStructureAnimators.map(animator => {
        const workData = workDataMap.get(animator.id);
        
        if (workData) {
          // ✅ Animateur avec données de pointage - utiliser la structure API correcte
          console.log(`✅ Données trouvées pour ${animator.first_name}:`, workData);
          
          return {
            // Données utilisateur (depuis myStructureAnimators pour avoir tous les champs)
            id: animator.id,
            first_name: animator.first_name,
            last_name: animator.last_name,
            email: animator.email,
            weekly_hours: animator.weekly_hours || 35,
            annual_hours: animator.annual_hours,
            active: animator.active,
            
            // Données de travail (depuis l'API)
            totalHours: Math.round((workData.totalHours || 0) * 100) / 100,
            periodObjective: Math.round((workData.periodObjective || 0) * 100) / 100,
            hoursDifference: Math.round((workData.hoursDifference || 0) * 100) / 100,
            daysWorked: workData.daysWorked || 0,
            
            // Calcul du pourcentage de performance
            performance: workData.periodObjective > 0 
              ? Math.round((workData.totalHours / workData.periodObjective) * 100) 
              : 0
          };
        } else {
          // ✅ Animateur sans données de pointage - calculer l'objectif par défaut
          console.log(`⚠️ Pas de données pour ${animator.first_name}, calcul par défaut`);
          
          const weeklyHours = animator.weekly_hours || 35;
          const annualHours = animator.annual_hours;
          
          // Calculer l'objectif basé sur la période sélectionnée
          const periodObjective = calculatePeriodObjective(teamDateRange, weeklyHours, annualHours);
          
          return {
            id: animator.id,
            first_name: animator.first_name,
            last_name: animator.last_name,
            email: animator.email,
            weekly_hours: weeklyHours,
            annual_hours: annualHours,
            active: animator.active,
            
            totalHours: 0,
            periodObjective: periodObjective,
            hoursDifference: -periodObjective, // Tout l'objectif reste à faire
            daysWorked: 0,
            performance: 0
          };
        }
      });
      
      console.log('📋 Tableau final avec tous les animateurs:', allAnimatorsData);
      setTeamData(allAnimatorsData);
      
    } else {
      console.warn('⚠️ API team-summary: pas de données ou échec');
      throw new Error('Pas de données reçues de l\'API');
    }
  } catch (error) {
    console.error('❌ Erreur chargement équipe:', error);
    
    // ✅ FALLBACK: Afficher tous les animateurs avec des valeurs par défaut
    const fallbackData = myStructureAnimators.map(animator => {
      const weeklyHours = animator.weekly_hours || 35;
      const annualHours = animator.annual_hours;

      const periodObjective = calculatePeriodObjective(teamDateRange, weeklyHours, annualHours); // Par défaut mensuel
      
      return {
        id: animator.id,
        first_name: animator.first_name,
        last_name: animator.last_name,
        email: animator.email,
        weekly_hours: weeklyHours,
        annual_hours: annualHours,
        active: animator.active,
        
        totalHours: 0,
        periodObjective: periodObjective,
        hoursDifference: -periodObjective,
        daysWorked: 0,
        performance: 0
      };
    });
    
    console.log('🔄 Fallback avec données par défaut:', fallbackData);
    setTeamData(fallbackData);
  }
};

  const handleClockAction = async (action) => {
    if (actionLoading) return;
    setActionLoading(action);
    
    try {
      let result;
      switch (action) {
        case 'arrival':
          result = await clockIn();
          break;
        case 'departure':
          result = await clockOut();
          break;
        case 'break_start':
          result = await startBreak();
          break;
        case 'break_end':
          result = await endBreak();
          break;
        default:
          throw new Error('Action non reconnue');
      }

      await fetchTodayEntries();
      if (user?.id) {
        await fetchTimeHistory(30, user.id);
        await fetchMonthlyReport(null, null, user.id);
      }
      
    } catch (error) {
      console.error(`❌ Erreur lors du pointage ${action}:`, error);
    } finally {
      setActionLoading(null);
    }
  };

  const exportTeamData = async () => {
    try {
      if (useTimeStore.getState().exportTeamData) {
        await useTimeStore.getState().exportTeamData('csv', {
          days: teamDateRange,
          structureId: user.structure_id,
          userId: selectedAnimator !== 'all' ? selectedAnimator : null
        });
      } else {
        console.log('Export des données d\'équipe...');
      }
    } catch (error) {
      console.error('Erreur lors de l\'export:', error);
    }
  };

  // ===== CALCULS ET DONNÉES =====
  if (adminLoading || timeLoading || !user?.structure_id) {
    return (
      <div className="flex items-center justify-center min-h-64">
        <div className="text-center">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-blue-600 mx-auto mb-4"></div>
          <p className="text-gray-600">Chargement de votre espace directeur...</p>
        </div>
      </div>
    );
  }

  const myStructureAnimators = users.filter(u => 
    u && u.role === 'animator' && u.structure_id === user.structure_id
  );
  const myStructure = structures.find(s => s && s.id === user.structure_id);
  
  const myTodayEntries = todayEntries.filter(entry => entry?.user_id === user?.id);
  
  const getTodayStatusLocal = () => {
    const status = {
      arrival: null,
      departure: null,
      breakStart: null,
      breakEnd: null,
    };

    myTodayEntries.forEach(entry => {
      switch (entry.tracking_type) {
        case 'arrival':
          status.arrival = entry;
          break;
        case 'departure':
          status.departure = entry;
          break;
        case 'break_start':
          status.breakStart = entry;
          break;
        case 'break_end':
          status.breakEnd = entry;
          break;
        default:
          break;
      }
    });

    return status;
  };

  const status = getTodayStatusLocal();

  const filteredAnimators = myStructureAnimators.filter(animator => {
    const matchesSearch = 
      (animator.first_name || "").toLowerCase().includes(searchTerm.toLowerCase()) ||
      (animator.last_name || "").toLowerCase().includes(searchTerm.toLowerCase()) ||
      (animator.email || "").toLowerCase().includes(searchTerm.toLowerCase());
    return matchesSearch;
  });

  const totalAnimators = myStructureAnimators.length;
  const activeAnimators = myStructureAnimators.filter(a => a?.active).length;

  const recentActivity = todayEntries
    .filter(entry => {
      const entryUser = myStructureAnimators.find(u => u?.id === entry?.user_id);
      return entryUser !== undefined;
    })
    .slice(0, recentActivityLimit)
    .sort((a, b) => new Date(b.date_time) - new Date(a.date_time));

  // Formatage du temps
  const getWorkedTime = () => {
    if (status.arrival && status.departure) {
      const start = new Date(status.arrival.date_time);
      const end = new Date(status.departure.date_time);
      let totalMinutes = (end - start) / (1000 * 60);
      if (status.breakStart && status.breakEnd) {
        const breakStart = new Date(status.breakStart.date_time);
        const breakEnd = new Date(status.breakEnd.date_time);
        totalMinutes -= (breakEnd - breakStart) / (1000 * 60);
      }
      const hours = Math.floor(totalMinutes / 60);
      const minutes = Math.round(totalMinutes % 60);
      return `${hours}h${minutes.toString().padStart(2, '0')}`;
    }
    return '--h--';
  };

  const getWeeklyWorkedTime = () => {
    if (weeklyStats && weeklyStats.formattedTotalHours) {
      return weeklyStats.formattedTotalHours;
    }
    return '--h--';
  };

  const getMonthlyWorkedTime = () => {
    if (monthlyStats && monthlyStats.formattedTotalHours) {
      return monthlyStats.formattedTotalHours;
    }
    return '--h--';
  };

  // Statut de pointage
const canClockIn = !status.arrival && !status.departure;
const canPauseOrResume = status.arrival && !status.departure;
const canClockOut = status.arrival && !status.departure;

  // ===== COMPOSANTS DE RENDU =====
  const renderHeader = () => (
    <div className="flex items-center justify-between mb-6">
      <div>
        <div className="flex items-center mb-2">
          <span className="text-2xl mr-3">👋</span>
          <h1 className="text-3xl font-bold text-gray-900">
            Bonjour {user?.first_name}
          </h1>
        </div>
        <div className="flex items-center text-gray-600">
          <MapPin className="w-4 h-4 mr-2 flex-shrink-0" />
          <span>
            Structure : {myStructure?.name || 'Non renseignée'}
          </span>
        </div>
      </div>
    </div>
  );

  // Actions rapides
  const renderQuickActions = () => (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
      <Card 
        clickable 
        hoverable 
        className="p-4"
        onClick={() => setActiveView('schedule')}
      >
        <div className="flex items-center">
          <div className="p-3 bg-blue-100 rounded-lg">
            <Clock className="w-6 h-6 text-blue-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-600">Gérer</p>
            <p className="text-lg font-semibold text-gray-900">Mes Horaires</p>
          </div>
        </div>
      </Card>

      <Card 
        clickable 
        hoverable 
        className="p-4"
        onClick={() => setActiveView('team')}
      >
        <div className="flex items-center">
          <div className="p-3 bg-green-100 rounded-lg">
            <Users className="w-6 h-6 text-green-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-600">Équipe</p>
            <p className="text-lg font-semibold text-gray-900">Animateurs</p>
          </div>
        </div>
      </Card>

      <Card clickable hoverable className="p-4">
        <div className="flex items-center justify-between mb-4">
          <h2 className="text-xl font-bold">Projets (à venir)</h2>
          <Button
            variant="primary"
            onClick={() => setShowCreateProjectModal(true)}
            className="mb-0"
          >
            + Créer un projet
          </Button>
        </div>
      </Card>



<Card 
  clickable 
  hoverable 
  className="p-4"
  onClick={() => setActiveView('planning')}
>
  <div className="flex items-center">
    <div className="p-3 bg-indigo-100 rounded-lg">
      <Calendar className="w-6 h-6 text-indigo-600" />
    </div>
    <div className="ml-4">
      <p className="text-sm font-medium text-gray-600">Planifier</p>
      <p className="text-lg font-semibold text-gray-900">Mes Heures</p>
    </div>
  </div>
</Card>

      <Card 
        clickable 
        hoverable 
        className="p-4"
        onClick={() => setActiveView('realized')}
      >
        <div className="flex items-center">
          <div className="p-3 bg-green-100 rounded-lg">
            <CheckCircle className="w-6 h-6 text-green-600" />
          </div>
          <div className="ml-4">
            <p className="text-sm font-medium text-gray-600">Consulter</p>
            <p className="text-lg font-semibold text-gray-900">Heures Réalisées</p>
          </div>
        </div>
      </Card>

    </div>
  );

  const renderStatsCards = () => (
    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-6">


      <StatsCard
        title="Mes Heures"
        value={getWeeklyWorkedTime()}
        change="cette semaine"
        trend="neutral"
        icon={<Clock className="w-6 h-6" />}
      />

      <StatsCard
        title="Mes Animateurs"
        value={totalAnimators}
        change={`${activeAnimators} actifs`}
        trend="positive"
        icon={<Users className="w-6 h-6" />}
      />


    </div>
  );

  // Vue principale du dashboard
  const renderDashboard = () => (
    <>
      {renderHeader()}
      {renderQuickActions()}
      {renderStatsCards()}
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div>{renderAnimatorsList()}</div>
        <div>{renderRecentActivity()}</div>
      </div>
    </>
  );

    // Liste des animateurs
  const renderAnimatorsList = () => (
    <Card title="Mes Animateurs" className="h-full">
      <div className="space-y-4">
        {/* Barre de recherche */}
        <div className="relative">
          <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
          <Input
            placeholder="Rechercher un animateur..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-10"
          />
        </div>

        {/* Liste des animateurs */}
        <div className="space-y-2 max-h-80 overflow-y-auto">
          {filteredAnimators.length > 0 ? (
            filteredAnimators.slice(0, showAllAnimators ? filteredAnimators.length : 5).map((animator) => (
              <div 
                key={animator.id} 
                className="flex items-center justify-between p-3 bg-gray-50 rounded-lg hover:bg-gray-100 transition-colors cursor-pointer"
                onClick={() => handleAnimatorSelection(animator.id)}
              >
                <div className="flex items-center">
                  <div className={`w-3 h-3 rounded-full mr-3 ${animator.active ? 'bg-green-500' : 'bg-red-500'}`}></div>
                  <div>
                    <p className="font-medium text-gray-900">
                      {animator.first_name} {animator.last_name}
                    </p>
                    <p className="text-sm text-gray-500">{animator.email}</p>
                  </div>
                </div>
<div className="flex items-center space-x-2">
  <Button
    variant="outline"
    size="sm"
    onClick={(e) => {
      e.stopPropagation();
      handleEditUser(animator);
    }}
  >
    Modifier
  </Button>
  <Button
    onClick={async (e) => {
      e.stopPropagation();
      try {
        await toggleUserStatus(animator.id, !animator.active);
        console.log(`✅ Statut animateur ${animator.id} modifié`);
        // Recharger les données
        await loadData();
      } catch (error) {
        console.error('❌ Erreur toggle status:', error);
      }
    }}
    variant={animator.active ? "success" : "danger"}
    size="sm"
    className="min-w-[70px]"
  >
    {animator.active ? 'Actif' : 'Inactif'}
  </Button>
</div>
              </div>
            ))
          ) : (
            <div className="text-center py-8 text-gray-500">
              <Users className="w-12 h-12 mx-auto mb-4 text-gray-300" />
              <p>Aucun animateur trouvé</p>
            </div>
          )}
        </div>

        {/* Bouton voir plus */}
        {filteredAnimators.length > 5 && (
          <Button
            variant="outline"
            onClick={() => setShowAllAnimators(!showAllAnimators)}
            className="w-full"
          >
            {showAllAnimators ? 'Voir moins' : `Voir tous (${filteredAnimators.length})`}
          </Button>
        )}
      </div>
    </Card>
  );

  // Activité récente
  const renderRecentActivity = () => (
    <Card title="Activité Récente" className="h-full">
      <div className="space-y-3 max-h-80 overflow-y-auto">
        {recentActivity.length > 0 ? (
          recentActivity.slice(0, showAllActivity ? recentActivity.length : 10).map((entry, index) => {
            const entryUser = myStructureAnimators.find(u => u?.id === entry?.user_id);
            const actionIcon = {
              'arrival': <PlayCircle className="w-4 h-4 text-green-600" />,
              'departure': <StopCircle className="w-4 h-4 text-red-600" />,
              'break_start': <PauseCircle className="w-4 h-4 text-orange-500" />,
              'break_end': <PauseCircle className="w-4 h-4 text-blue-500" />
            };

            const actionLabel = {
              'arrival': 'Arrivée',
              'departure': 'Départ',
              'break_start': 'Début pause',
              'break_end': 'Fin pause'
            };

            return (
              <div key={index} className="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                <div className="flex items-center">
                  {actionIcon[entry.tracking_type]}
                  <div className="ml-3">
                    <p className="text-sm font-medium text-gray-900">
                      {entryUser ? `${entryUser.first_name} ${entryUser.last_name}` : 'Utilisateur inconnu'}
                    </p>
                    <p className="text-xs text-gray-500">
                      {actionLabel[entry.tracking_type]}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <p className="text-sm text-gray-600">
                    {new Date(entry.date_time).toLocaleTimeString('fr-FR', { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </p>
                  <p className="text-xs text-gray-400">
                    {new Date(entry.date_time).toLocaleDateString('fr-FR')}
                  </p>
                </div>
              </div>
            );
          })
        ) : (
          <div className="text-center py-8 text-gray-500">
            <Activity className="w-12 h-12 mx-auto mb-4 text-gray-300" />
            <p>Aucune activité récente</p>
          </div>
        )}
      </div>

      {recentActivity.length > 10 && (
        <Button
          variant="outline"
          onClick={() => setShowAllActivity(!showAllActivity)}
          className="w-full mt-4"
        >
          {showAllActivity ? 'Voir moins' : `Voir toutes (${recentActivity.length})`}
        </Button>
      )}
    </Card>
  );
  
    <>
      {renderHeader()}
      <VacationTester />
      {renderQuickActions()}
      {renderStatsCards()}
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        <div>{renderAnimatorsList()}</div>
        <div>{renderRecentActivity()}</div>
      </div>
    </>

  // Gestion d'équipe
  const renderTeamManagement = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Gestion d'Équipe</h2>
          <p className="text-gray-600 mt-1">Suivi des horaires de vos animateurs</p>
        </div>
        <div className="flex items-center space-x-3">
          <Button variant="outline" onClick={exportTeamData}>
            <Download className="w-4 h-4 mr-2" />
            Exporter
          </Button>
          <Button variant="outline" onClick={() => setActiveView('dashboard')}>
            Retour au tableau de bord
          </Button>
        </div>
      </div>

      {/* Filtres d'équipe */}
      {renderTeamFilters()}

      {/* Données d'équipe */}
      {renderTeamData()}
    </div>
  );

  // Filtres d'équipe
  const renderTeamFilters = () => (
    <Card className="p-4">
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Période
          </label>
          <select
            value={teamDateRange}
            onChange={(e) => setTeamDateRange(e.target.value)}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500"
          >
            {PERIOD_OPTIONS.filter(p => p.value !== 'custom').map((option) => (
              <option key={option.value} value={option.value} title={option.description}>
                {option.label}
              </option>
            ))}
          </select>
        </div>

        <div>
          <label className="block text-sm font-medium text-gray-700 mb-2">
            Animateur
          </label>
          <select
            value={selectedAnimator}
            onChange={(e) => handleAnimatorSelection(e.target.value)}
            className="w-full border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500"
          >
            <option value="all">Tous les animateurs</option>
            {myStructureAnimators.map(animator => (
              <option key={animator.id} value={animator.id}>
                {animator.first_name} {animator.last_name}
              </option>
            ))}
          </select>
        </div>

        <div className="flex items-end">
          <Button 
            onClick={() => setShowCreateAnimatorModal(true)} 
            className="w-full"
            variant="primary"
          >
            <Plus className="w-4 h-4 mr-2" />
            Créer Animateur
          </Button>
        </div>
      </div>
    </Card>
  );

  // Données d'équipe
  const renderTeamData = () => (
  <Card title="Données d'équipe">
    <div className="overflow-x-auto">
      <table className="min-w-full divide-y divide-gray-200">
        <thead className="bg-gray-50">
          <tr>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Animateur</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Heures travaillées</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Objectif</th>
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Différence</th>
            {/* ✅ SUPPRIMÉ: Colonne Statut */}
            <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Actions</th>
          </tr>
        </thead>
        <tbody className="bg-white divide-y divide-gray-200">
          {teamData.length > 0 ? (
            teamData.map((member) => (
              <tr key={member.id}>
                <td className="px-6 py-4 whitespace-nowrap">
                  <div className="flex items-center">
                    <div className={`w-3 h-3 rounded-full mr-3 ${member.active ? 'bg-green-500' : 'bg-red-500'}`}></div>
                    <div>
                      <div className="text-sm font-medium text-gray-900">
                        {member.first_name} {member.last_name}
                      </div>
                      <div className="text-sm text-gray-500">{member.email}</div>
                    </div>
                  </div>
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {member.totalHours || '0'}h
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                  {/*  Afficher l'objectif cohérent avec la période */}
                  {member.periodObjective || '0'}h
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  {/* Afficher la différence en heures au lieu du pourcentage */}
                  <span className={`${
                    (member.hoursDifference || 0) >= 0 
                      ? 'text-green-600' 
                      : 'text-red-600'
                  }`}>
                    {(member.hoursDifference || 0) >= 0 ? '+' : ''}{member.hoursDifference || '0'}h
                  </span>
                </td>
                {/* Colonne Statut */}
                <td className="px-6 py-4 whitespace-nowrap text-sm font-medium">
                  <div className="flex space-x-2">
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleAnimatorSelection(member.id)}
                    >
                      Détails
                    </Button>
                    <Button
                      variant="outline"
                      size="sm"
                      onClick={() => handleEditUser(member)}
                    >
                      Modifier
                    </Button>
                    <Button
                      onClick={async () => {
                        try {
                          await toggleUserStatus(member.id, !member.active);
                          console.log(`✅ Statut animateur ${member.id} modifié`);
                          await loadTeamData();
                        } catch (error) {
                          console.error('❌ Erreur toggle status:', error);
                        }
                      }}
                      variant={member.active ? "success" : "danger"}
                      size="sm"
                      className="min-w-[80px]"
                    >
                      {member.active ? 'Actif' : 'Inactif'}
                    </Button>
                  </div>
                </td>
              </tr>
            ))
          ) : (
            <tr>
              <td colSpan="5" className="px-6 py-8 text-center text-gray-500 text-sm">
                Aucune donnée d'équipe disponible
              </td>
            </tr>
          )}
        </tbody>
      </table>
    </div>
  </Card>
);

  // Gestion des horaires personnels du directeur
  const renderScheduleManagement = () => (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h2 className="text-2xl font-bold text-gray-900">Mes Horaires</h2>
          <p className="text-gray-600 mt-1">Gestion de votre temps de travail</p>
        </div>
        <div className="flex items-center space-x-3">
          <Button variant="outline" onClick={() => setActiveView('dashboard')}>
            Retour au tableau de bord
          </Button>
        </div>
      </div>

      {/* Panel de pointage */}
      {renderDirectorTimeTracking()}

      {/* Historique */}
      {renderDirectorHistory()}
    </div>
  );

  // Pointage du directeur
const renderDirectorTimeTracking = () => (
  <div className="grid grid-cols-1 lg:grid-cols-3 gap-6 mb-6">
    {/* Panel de pointage central et plus large */}
    <Card title="Pointage du jour" className="lg:col-span-2">
      <div className="space-y-6 p-6">
        {/* Affichage de l'heure actuelle */}
        <div className="text-center bg-gray-50 rounded-lg p-4">
          <div className="text-3xl font-bold text-gray-900 mb-2">
            {currentTime}
          </div>
          <div className="text-sm text-gray-500">
            {new Date().toLocaleDateString('fr-FR', { 
              weekday: 'long', 
              year: 'numeric', 
              month: 'long', 
              day: 'numeric' 
            })}
          </div>
        </div>

        {/* Boutons de pointage - MÊME LOGIQUE QUE ANIMATEUR */}
        <div className="grid grid-cols-1 sm:grid-cols-3 gap-4">
          <button
            onClick={() => handleClockAction('arrival')}
            disabled={!canClockIn || actionLoading === 'arrival'}
            className={`p-4 rounded-lg border-2 transition-all duration-200 ${
              canClockIn && actionLoading !== 'arrival'
                ? 'border-green-300 bg-green-50 hover:bg-green-100 text-green-700 cursor-pointer'
                : 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed'
            }`}
          >
            <div className="flex flex-col items-center">
              <PlayCircle className="w-8 h-8 mb-2" />
              <span className="text-sm font-medium">
                {actionLoading === 'arrival' ? 'En cours...' : 'Arrivée'}
              </span>
            </div>
          </button>

 {/* Bonton Pause/Reprise          */}
<button
  onClick={() => handleClockAction(isOnBreak(myTodayEntries) ? 'break_end' : 'break_start')}
  disabled={!canPauseOrResume || (actionLoading === 'break_start' || actionLoading === 'break_end')}
  className={`p-4 rounded-lg border-2 transition-all duration-200 ${
    canPauseOrResume && !actionLoading
      ? 'border-blue-300 bg-blue-50 hover:bg-blue-100 text-blue-700 cursor-pointer'
      : 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed'
  }`}
>
  <div className="flex flex-col items-center">
    <PauseCircle className="w-8 h-8 mb-2" />
    <span className="text-sm font-medium">
      {actionLoading === 'break_start' || actionLoading === 'break_end'
        ? 'En cours...'
        : isOnBreak(myTodayEntries)
          ? 'Reprise'
          : 'Pause'
      }
    </span>
  </div>
</button>

{/* Bouton Départ */}
          <button
            onClick={() => handleClockAction('departure')}
            disabled={!canClockOut || actionLoading === 'departure'}
            className={`p-4 rounded-lg border-2 transition-all duration-200 ${
              canClockOut && actionLoading !== 'departure'
                ? 'border-red-300 bg-red-50 hover:bg-red-100 text-red-700 cursor-pointer'
                : 'border-gray-200 bg-gray-50 text-gray-400 cursor-not-allowed'
            }`}
          >
            <div className="flex flex-col items-center">
              <StopCircle className="w-8 h-8 mb-2" />
              <span className="text-sm font-medium">
                {actionLoading === 'departure' ? 'En cours...' : 'Départ'}
              </span>
            </div>
          </button>
        </div>

        {/* Résumé du jour - MÊME DESIGN QUE ANIMATEUR */}
        <div className="bg-white border border-gray-200 rounded-lg p-4 space-y-3">
          <h3 className="text-lg font-semibold text-gray-900 mb-3">Pointages du jour</h3>
          
          <div className="grid grid-cols-2 gap-4">
            <div className="flex items-center">
              <PlayCircle className="w-4 h-4 mr-2 text-green-600" />
              <div>
                <span className="text-sm text-gray-500">Arrivée</span>
                <p className="font-medium">
                  {status.arrival 
                    ? new Date(status.arrival.date_time).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })
                    : '--:--'
                  }
                </p>
              </div>
            </div>

            <div className="flex items-center">
              <StopCircle className="w-4 h-4 mr-2 text-red-600" />
              <div>
                <span className="text-sm text-gray-500">Départ</span>
                <p className="font-medium">
                  {status.departure 
                    ? new Date(status.departure.date_time).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })
                    : '--:--'
                  }
                </p>
              </div>
            </div>

            <div className="flex items-center">
              <PauseCircle className="w-4 h-4 mr-2 text-orange-500" />
              <div>
                <span className="text-sm text-gray-500">Pause début</span>
                <p className="font-medium">
                  {status.breakStart 
                    ? new Date(status.breakStart.date_time).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })
                    : '--:--'
                  }
                </p>
              </div>
            </div>

            <div className="flex items-center">
              <PauseCircle className="w-4 h-4 mr-2 text-blue-500" />
              <div>
                <span className="text-sm text-gray-500">Pause fin</span>
                <p className="font-medium">
                  {status.breakEnd 
                    ? new Date(status.breakEnd.date_time).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })
                    : '--:--'
                  }
                </p>
              </div>
            </div>
          </div>

          <div className="border-t pt-3 mt-3">
            <div className="flex justify-between items-center">
              <span className="text-sm font-medium text-gray-700">Temps travaillé :</span>
    <span className="text-lg font-bold text-gray-900">{getWorkedTimeWithMultipleBreaks()}</span>
            </div>
          </div>

        {/* Détail de toutes les pauses */}
<div className="border-t pt-3 mt-3">
  <h4 className="text-sm font-semibold text-gray-700 mb-2">Détail des pauses :</h4>
  {getPauses(myTodayEntries).length === 0 ? (
    <div className="text-xs text-gray-400 italic">Aucune pause effectuée</div>
  ) : (
    <ul className="text-xs text-gray-700 space-y-1">
      {getPauses(myTodayEntries).map((pause, idx) => (
        <li key={idx} className="flex justify-between items-center">
          <span className="font-medium">Pause {idx + 1} :</span>
          <span>
            {pause.start ? new Date(pause.start.date_time).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' }) : '--:--'}
            {" → "}
            {pause.end ? (
              new Date(pause.end.date_time).toLocaleTimeString('fr-FR', { hour: '2-digit', minute: '2-digit' })
            ) : (
              <span className="text-orange-500 font-medium">en cours</span>
            )}
          </span>
        </li>
      ))}
    </ul>
  )}
</div>  
        </div>

        {/* Aide contextuelle */}
        {!status.arrival && (
          <div className="p-3 bg-blue-50 rounded-lg">
            <p className="text-sm text-blue-700">
              💡 Commencez votre journée en cliquant sur "Arrivée"
            </p>
          </div>
        )}
      </div>
    </Card>

    {/* Panel statistiques quotidiennes */}
    <div className="space-y-4">
      <StatsCard
        title="Aujourd'hui"
        value={getWorkedTime() === '--h--' ? '0h00' : getWorkedTime()}
        trend="neutral"
        icon={<Clock className="w-5 h-5" />}
      />
      <StatsCard
        title="Cette semaine"
        value={getWeeklyWorkedTime()}
        trend="neutral"
        icon={<Calendar className="w-5 h-5" />}
      />
      <StatsCard
        title="Ce mois-ci"
        value={getMonthlyWorkedTime()}
        trend="neutral"
        icon={<Activity className="w-5 h-5" />}
      />
    </div>
  </div>
);

  // Historique des pointages du directeur
  const renderDirectorHistory = () => (
    <Card title="Historique récent">
      <div className="space-y-3 max-h-64 overflow-y-auto">
        {processedHistory.slice(0, 10).map((day, index) => (
          <div key={index} className={`flex justify-between items-center p-3 rounded-lg ${
            day.workingHours > 0 ? 'bg-green-50' : 'bg-gray-50'
          }`}>
            <div>
              <p className="font-medium text-gray-900">{day.dayName}</p>
              <p className="text-sm text-gray-500">{day.formattedDate}</p>
            </div>
            <div className="text-right">
              <p className={`font-semibold ${
                day.workingHours >= 7 ? 'text-green-600' : 
                day.workingHours > 0 ? 'text-orange-600' : 'text-gray-400'
              }`}>
                {day.formattedWorkingHours}
              </p>
              <p className="text-xs text-gray-400">
                {day.arrival ? `${day.arrival} - ${day.departure || 'En cours'}` : 'Absent'}
              </p>
            </div>
          </div>
        ))}
        
        {processedHistory.length === 0 && (
          <div className="text-center py-8 text-gray-500">
            <Activity className="w-12 h-12 mx-auto mb-4 text-gray-300" />
            <p>Aucun historique disponible</p>
          </div>
        )}
      </div>
    </Card>
  );

  // Sélection d'animateur avec statistiques
const handleAnimatorSelection = async (animatorId) => {
  if (animatorId !== 'all') {
    // Toujours charger les stats et ouvrir la modal, même si c'est le même animateur
    setSelectedAnimator(animatorId);
    await loadAnimatorDetailedStats(animatorId, selectedPeriodForStats);
    setShowAnimatorStatsModal(true);
  } else {
    setSelectedAnimator('all');
    setSelectedAnimatorStats(null);
    setShowAnimatorStatsModal(false);
    document.body.style.overflow = 'unset';
    document.body.classList.remove('modal-open');
  }
};

  // Charger les statistiques détaillées d'un animateur
  const loadAnimatorDetailedStats = async (animatorId, period = 'current_month') => {
    if (!animatorId) return;
    
    setAnimatorStatsLoading(true);
    try {
      const animator = myStructureAnimators.find(a => a.id === parseInt(animatorId));
      if (!animator) return;

      const dateRange = calculatePeriodDates(period);
      
      const result = await fetchTimeHistory(null, animatorId, dateRange.start, dateRange.end);
      if (result.success) {
        const entries = result.data || [];
        const stats = calculateComprehensiveStats(entries, animator, period, dateRange);
        setSelectedAnimatorStats(stats);
      }
    } catch (error) {
      console.error('Erreur chargement stats animateur:', error);
    } finally {
      setAnimatorStatsLoading(false);
    }
  };

const calculateComprehensiveStats = (entries, animator, period, dateRange) => {
  console.log('🔄 Calcul des stats complètes...');
  console.log('📊 Entrées reçues:', entries.length);
  console.log('📋 Première entrée:', entries[0]);
  
  if (!entries || entries.length === 0) {
    console.log('⚠️ Aucune entrée, retour stats vides');
    return createEmptyStats(animator, period, dateRange);
  }

  const processedDays = calculateTotalHours(entries);
  console.log('📈 Jours traités:', processedDays.length);
  console.log('📊 Premier jour traité:', processedDays[0]);
  
  if (processedDays.length === 0) {
    console.log('⚠️ Aucun jour traité');
    return createEmptyStats(animator, period, dateRange);
  }

  // Calculs basiques
  const weeklyObjective = animator.weekly_hours || 35;
  const annualObjective = animator.annual_hours;
  
  let periodObjective;
  switch (period) {
    case 'current_week':
    case 'previous_week':
      periodObjective = weeklyObjective;
      break;
    case 'current_month':
    case 'previous_month':
    case 'last_30_days':
      periodObjective = weeklyObjective * 4.33;
      break;
    case 'current_year':
    case 'previous_year':
      periodObjective = annualObjective || (weeklyObjective * 52);
      break;
    default:
      periodObjective = weeklyObjective * 4.33;
  }
  
  const totalHours = processedDays.reduce((sum, day) => sum + (day.workingHours || 0), 0);
  const completeDays = processedDays.filter(day => day.isComplete).length;
  const averagePerDay = completeDays > 0 ? totalHours / completeDays : 0;
  const completionRate = periodObjective > 0 ? (totalHours / periodObjective) * 100 : 0;
  
  // ✅ SIMPLE : Utiliser directement processedDays
  const workingDays = processedDays;
  
  console.log('✅ Working days créés:', workingDays.length);
  console.log('📊 Premier working day:', workingDays[0]);
  
  // Calculs de patterns (version simple)
  const arrivalTimes = workingDays
    .filter(day => day.arrival)
    .map(day => {
      const [hours, minutes] = day.arrival.split(':').map(Number);
      return hours + minutes / 60;
    });
  
  const averageArrival = arrivalTimes.length > 0 
    ? arrivalTimes.reduce((sum, time) => sum + time, 0) / arrivalTimes.length 
    : 0;

  const formatDecimalToTime = (decimal) => {
    if (!decimal || decimal === 0) return '--:--';
    const hours = Math.floor(decimal);
    const minutes = Math.round((decimal - hours) * 60);
    return `${hours.toString().padStart(2, '0')}:${minutes.toString().padStart(2, '0')}`;
  };

  const result = {
    animator,
    period: {
      type: period,
      label: dateRange.label,
      start: dateRange.start,
      end: dateRange.end,
      totalDays: workingDays.length
    },
    hours: {
      total: Math.round(totalHours * 100) / 100,
      objective: periodObjective,
      remaining: Math.max(0, periodObjective - totalHours),
      variance: Math.round((totalHours - periodObjective) * 100) / 100,
      averagePerDay: Math.round(averagePerDay * 100) / 100,
      totalBreakTime: processedDays.reduce((sum, day) => sum + (day.breakHours || 0), 0)
    },
    performance: {
      completionRate: Math.round(completionRate),
      completeDays,
      status: { label: completionRate >= 90 ? 'Bon' : 'À améliorer', color: completionRate >= 90 ? 'green' : 'orange', icon: AlertCircle },
      isOnTrack: completionRate >= 90,
      needsAttention: completionRate < 75
    },
    patterns: {
      averageArrival: formatDecimalToTime(averageArrival),
      punctualityScore: Math.round(Math.max(0, 100 - (arrivalTimes.length > 1 ? 10 : 0))),
      mostProductiveDay: workingDays.length > 0 ? (workingDays.reduce((best, day) => day.workingHours > best.workingHours ? day : best, workingDays[0]).dayName || 'Inconnu') : 'Aucun',
      consistency: { label: 'Régulier', color: 'blue' }
    },
    workingDays: workingDays, // ✅ IMPORTANT: Les données pour le tableau
    lastUpdate: new Date().toISOString()
  };
  
  console.log('✅ Stats complètes calculées:', result);
  console.log('📊 Working days dans result:', result.workingDays.length);
  return result;
};

const createEmptyStats = (animator, period, dateRange) => {
  const weeklyObjective = animator?.weekly_hours || 35;
  const annualObjective = animator?.annual_hours;
  const periodObjective = calculatePeriodObjective(period, weeklyObjective, annualObjective);
  
  return {
    animator: animator || { first_name: 'Inconnu', last_name: '', weekly_hours: 35 },
    period: {
      type: period,
      label: dateRange.label,
      start: dateRange.start,
      end: dateRange.end,
      totalDays: 0
    },
    hours: {
      total: 0,
      objective: periodObjective,
      remaining: periodObjective,
      variance: -periodObjective,
      averagePerDay: 0,
      totalBreakTime: 0
    },
    performance: {
      completionRate: 0,
      completeDays: 0,
      status: { label: 'Aucune donnée', color: 'gray', icon: AlertCircle },
      isOnTrack: false,
      needsAttention: true
    },
    patterns: {
      averageArrival: '--:--',
      punctualityScore: 0,
      mostProductiveDay: 'Aucun',
      consistency: { label: 'Aucune donnée', color: 'gray' }
    },
    workingDays: [],
    lastUpdate: new Date().toISOString()
  };
};
  // Modal des statistiques détaillées d'un animateur
  const renderAnimatorStatsModal = () => {
    if (!showAnimatorStatsModal || !selectedAnimatorStats) return null;

    const { animator, period, hours, performance, patterns, workingDays } = selectedAnimatorStats;

    return (
    <Modal
      isOpen={showAnimatorStatsModal}
      onClose={() => {
        setShowAnimatorStatsModal(false);
        document.body.style.overflow = 'unset';
        document.body.classList.remove('modal-open');
      }}
      size="6xl"
      title={`Statistiques détaillées - ${animator.first_name} ${animator.last_name}`}
      showCloseButton={true}
      closeOnOverlay={true}
      closeOnEscape={true}
    >
      <div 
        className="space-y-6" 
        style={{ 
          maxHeight: '75vh', 
          overflowY: 'auto',
          paddingRight: '4px' 
        }}
      >
          {/* En-tête avec contrôles de période */}
          <div className="flex items-center justify-between bg-gray-50 rounded-lg p-4">
            <div>
              <h3 className="text-lg font-semibold text-gray-900">{period.label}</h3>
              <p className="text-sm text-gray-600">
                Du {new Date(period.start).toLocaleDateString('fr-FR')} au {new Date(period.end).toLocaleDateString('fr-FR')}
              </p>
            </div>
            <div className="flex items-center space-x-3">
              <select
                value={selectedPeriodForStats}
                onChange={(e) => {
                  setSelectedPeriodForStats(e.target.value);
                  loadAnimatorDetailedStats(animator.id, e.target.value);
                }}
                className="border border-gray-300 rounded-lg px-3 py-2 text-sm focus:ring-2 focus:ring-blue-500"
              >
                {PERIOD_OPTIONS.filter(p => p.value !== 'custom').map((option) => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
            </div>
          </div>

          {/* Cartes de métriques principales */}
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
            <StatsCard
              title="Heures travaillées"
              value={`${hours.total}h`}
              change={`Objectif: ${hours.objective}h`}
              trend={performance.isOnTrack ? 'positive' : performance.needsAttention ? 'negative' : 'neutral'}
              icon={<Clock className="w-5 h-5" />}
              className={performance.isOnTrack ? 'border-l-4 border-green-500' : 
                        performance.needsAttention ? 'border-l-4 border-red-500' : 'border-l-4 border-yellow-500'}
            />

            <StatsCard
              title="Progression"
              value={`${performance.completionRate}%`}
              change={`${hours.remaining > 0 ? `${hours.remaining}h restantes` : 'Objectif atteint'}`}
              trend={performance.completionRate >= 90 ? 'positive' : 
                     performance.completionRate >= 75 ? 'neutral' : 'negative'}
              icon={<Target className="w-5 h-5" />}
            />

            <StatsCard
              title="Moyenne quotidienne"
              value={`${hours.averagePerDay}h`}
              change={`${performance.completeDays} jours complets`}
              trend="neutral"
              icon={<Timer className="w-5 h-5" />}
            />

            <StatsCard
              title="Ponctualité"
              value={patterns.consistency.label}
              change={`Arrivée moyenne: ${patterns.averageArrival}`}
              trend={patterns.punctualityScore >= 75 ? 'positive' : 'neutral'}
              icon={<CheckCircle className="w-5 h-5" />}
            />
          </div>

          {/* Graphique de progression */}
          <Card title="Progression vers l'objectif">
            <div className="p-6">
              <div className="flex justify-between items-center mb-2">
                <span className="text-sm font-medium text-gray-700">Avancement</span>
                <span className="text-sm text-gray-500">{performance.completionRate}%</span>
              </div>
              <div className="w-full bg-gray-200 rounded-full h-4">
                <div 
                  className={`h-4 rounded-full transition-all duration-300 ${
                    performance.completionRate >= 100 ? 'bg-green-500' : 
                    performance.completionRate >= 75 ? 'bg-blue-500' : 
                    performance.completionRate >= 50 ? 'bg-yellow-500' : 'bg-red-500'
                  }`}
                  style={{ width: `${Math.min(performance.completionRate, 100)}%` }}
                ></div>
              </div>
              <div className="flex justify-between text-sm text-gray-600 mt-2">
                <span>{hours.total}h travaillées</span>
                <span>{hours.objective}h objectif</span>
              </div>
              
              {/* Analyse de performance */}
              <div className="mt-4 p-3 rounded-lg bg-gray-50">
                <div className="flex items-center">
                  {React.createElement(performance.status.icon, { 
                    className: `w-5 h-5 mr-2 text-${performance.status.color}-600` 
                  })}
                  <span className={`font-medium text-${performance.status.color}-700`}>
                    {performance.status.label}
                  </span>
                </div>
                <p className="text-sm text-gray-600 mt-1">
                  {hours.variance >= 0 
                    ? `Dépassement de ${Math.abs(hours.variance)}h par rapport à l'objectif`
                    : `Retard de ${Math.abs(hours.variance)}h par rapport à l'objectif`
                  }
                </p>
              </div>
            </div>
          </Card>

          {/* Historique détaillé */}
<Card title="Historique (période sélectionnée)" className="overflow-hidden">
  <div className="overflow-x-auto">
    <table className="min-w-full divide-y divide-gray-200">
      <thead className="bg-gray-50">
        <tr>
          <th className="px-2 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase w-32">Date</th>
          <th className="px-2 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase w-20">Arrivée</th>
          <th className="px-2 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase w-20">Pause</th>
          <th className="px-2 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase w-20">Reprise</th>
          <th className="px-2 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase w-20">Départ</th>
          <th className="px-2 sm:px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase w-16">Total</th>
        </tr>
      </thead>
      <tbody className="bg-white divide-y divide-gray-200">
        {workingDays && workingDays.length > 0 ? (
          workingDays.slice(0, 15).map((day, index) => (
            <tr key={`${day.date}-${index}`}>
              <td className="px-2 sm:px-6 py-4 whitespace-nowrap text-xs text-gray-900 w-32">
                {day.formattedDate}
              </td>
              <td className="px-2 sm:px-6 py-4 whitespace-nowrap text-xs text-gray-900 w-20">
                {day.arrival || '--:--'}
              </td>
              <td className="px-2 sm:px-6 py-4 whitespace-nowrap text-xs text-gray-900 w-20">
                {day.breakStart || '--:--'}
              </td>
              <td className="px-2 sm:px-6 py-4 whitespace-nowrap text-xs text-gray-900 w-20">
                {day.breakEnd || '--:--'}
              </td>
              <td className="px-2 sm:px-6 py-4 whitespace-nowrap text-xs text-gray-900 w-20">
                {day.departure || '--:--'}
              </td>
              <td className="px-2 sm:px-6 py-4 whitespace-nowrap text-xs text-gray-900 w-16">
                {day.formattedWorkingHours}
              </td>
            </tr>
          ))
        ) : (
          <tr>
            <td colSpan="6" className="px-6 py-8 text-center text-gray-500 text-sm">
              {animatorStatsLoading ? (
                <div className="flex items-center justify-center">
                  <div className="animate-spin rounded-full h-6 w-6 border-b-2 border-blue-600 mr-2"></div>
                  Chargement des données...
                </div>
              ) : (
                <div>
                  <AlertCircle className="w-8 h-8 text-gray-300 mx-auto mb-2" />
                  <p>Aucun pointage trouvé pour cette période</p>
                  <p className="text-xs text-gray-400 mt-1">
                    L'animateur n'a pas encore effectué de pointages ou les données ne sont pas disponibles
                  </p>
                </div>
              )}
            </td>
          </tr>
        )}
      </tbody>
    </table>
  </div>
</Card>

          {/* Analyses et recommandations */}
          <Card title="Analyses et Recommandations">
            <div className="grid grid-cols-1 md:grid-cols-2 gap-6 p-6">
              <div>
                <h4 className="text-lg font-semibold mb-3 text-gray-900">Analyse des patterns</h4>
                <div className="space-y-3">
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Jour le plus productif :</span>
                    <span className="text-sm font-medium text-gray-900">{patterns.mostProductiveDay}</span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Régularité des horaires :</span>
                    <span className={`text-sm font-medium text-${patterns.consistency.color}-600`}>
                      {patterns.consistency.label}
                    </span>
                  </div>
                  <div className="flex justify-between items-center">
                    <span className="text-sm text-gray-600">Score de ponctualité :</span>
                    <span className="text-sm font-medium text-gray-900">{patterns.punctualityScore}/100</span>
                  </div>
                </div>
              </div>

              <div>
                <h4 className="text-lg font-semibold mb-3 text-gray-900">Recommandations</h4>
                <div className="space-y-2 text-sm text-gray-600">
                  {performance.needsAttention && (
                    <div className="flex items-start text-red-600">
                      <AlertCircle className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                      <span>Performance insuffisante - Entretien recommandé</span>
                    </div>
                  )}
                  {hours.variance < -10 && (
                    <div className="flex items-start text-orange-600">
                      <AlertCircle className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                      <span>Retard significatif sur les objectifs</span>
                    </div>
                  )}
                  {patterns.punctualityScore < 70 && (
                    <div className="flex items-start text-yellow-600">
                      <Timer className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                      <span>Améliorer la régularité des horaires</span>
                    </div>
                  )}
                  {performance.isOnTrack && (
                    <div className="flex items-start text-green-600">
                      <CheckCircle className="w-4 h-4 mr-2 mt-0.5 flex-shrink-0" />
                      <span>Performance excellente - Continuer ainsi</span>
                    </div>
                  )}
                </div>
              </div>
            </div>
          </Card>
        </div>
      </Modal>
    );
  };


  // Rendu du contenu principal selon la vue active
  const renderContent = () => {
    switch (activeView) {
      case 'dashboard':
        return renderDashboard();
      case 'team':
        return renderTeamManagement();
      case 'schedule':
        return renderScheduleManagement();
      case 'planning':
        return <YearlyPlanningRoadmap onBack={() => setActiveView('dashboard')} />;
      case 'realized': // ✅ NOUVEAU CAS
        return <RealizedHoursRoadmap onBack={() => setActiveView('dashboard')} />;
      default:
        return renderDashboard();
    }
  };

  // ===== RENDU PRINCIPAL =====
  return (
    <div className="space-y-6">
      {renderContent()}
      
      {/* Modals */}
      <Modal
        isOpen={showCreateAnimatorModal}
        onClose={() => setShowCreateAnimatorModal(false)}
        size="xl"
        showCloseButton={false}
      >
        <CreateUserForm
          onSuccess={handleAnimatorCreated}
          onCancel={() => setShowCreateAnimatorModal(false)}
          defaultRole="animator"
          structureId={user?.structure_id}
          isDirectorContext={true}
        />
      </Modal>

{showEditUserModal && selectedUser && (
  <Modal
    isOpen={showEditUserModal}
    onClose={() => {
      setShowEditUserModal(false);
      setSelectedUser(null);
      document.body.style.overflow = 'unset';
      document.body.classList.remove('modal-open');
    }}
    size="4xl" // ✅ Même taille que les stats
    title={`Modifier ${selectedUser.first_name} ${selectedUser.last_name}`}
    showCloseButton={true}
    closeOnOverlay={true}
    closeOnEscape={true}
  >
    <div 
      className="space-y-6" 
      style={{ 
        maxHeight: '75vh', 
        overflowY: 'auto',
        paddingRight: '4px' 
      }}
    >
      <EditUserForm
        user={selectedUser}
        onClose={() => {
          setShowEditUserModal(false);
          setSelectedUser(null);
          document.body.style.overflow = 'unset';
          document.body.classList.remove('modal-open');
        }}
        onUserUpdated={handleUserUpdated}
        isDirectorContext={true}
        fixedRole="animator"
        fixedStructureId={user?.structure_id}
      />
    </div>
  </Modal>
)}

{showCreateProjectModal && (
  <Modal
    isOpen={showCreateProjectModal}
    onClose={() => setShowCreateProjectModal(false)}
    title="Créer un projet"
    size="md"
  >
    <CreateProjectForm
      onSuccess={() => {
        setShowCreateProjectModal(false);
        // Optionnel: rafraîchir la liste des projets ici
      }}
      onCancel={() => setShowCreateProjectModal(false)}
    />
  </Modal>
)}
      {/* Modal des statistiques détaillées */}
      {renderAnimatorStatsModal()}
    </div>
  );
};

export default DirectorDashboard;
=== FIN frontend/src/components/dashboard/DirectorDashboard.jsx ===

=== FICHIER: frontend/src/components/common/Layout.jsx ===
import React, { useState, useEffect } from 'react';
import { LogOut, User, Clock, Menu, X, Bell, Settings, ChevronDown } from 'lucide-react';
import { useNavigate, useLocation } from 'react-router-dom';
import { useAuthStore } from '../../stores/authStore';
import Button from './Button';
import Card from './Card';
import QuickTimeTrackingIcons from '../common/QuickTimeTrackingIcons';

const Layout = ({ children, title, sidebar, breadcrumbs, actions }) => {
  const { user, logout } = useAuthStore();
  const navigate = useNavigate();
  const location = useLocation();
  const [sidebarOpen, setSidebarOpen] = useState(false);
  const [userMenuOpen, setUserMenuOpen] = useState(false);
  const [notifications, setNotifications] = useState([]);

  // Fermer les menus quand on clique ailleurs
  useEffect(() => {
    const handleClickOutside = () => {
      setUserMenuOpen(false);
    };

    document.addEventListener('click', handleClickOutside);
    return () => document.removeEventListener('click', handleClickOutside);
  }, []);

  const handleLogout = async () => {
    try {
      await logout();
      navigate('/login');
    } catch (error) {
      console.error('Erreur lors de la déconnexion:', error);
    }
  };

  const getRoleDisplayName = (role) => {
    const roleNames = {
      admin: 'Administrateur',
      director: 'Directeur',
      animator: 'Animateur'
    };
    return roleNames[role] || role;
  };

  const getRoleBadgeColor = (role) => {
    const colors = {
      admin: 'bg-red-100 text-red-800',
      director: 'bg-blue-100 text-blue-800',
      animator: 'bg-green-100 text-green-800'
    };
    return colors[role] || 'bg-gray-100 text-gray-800';
  };

  const renderBreadcrumbs = () => {
    if (!breadcrumbs || breadcrumbs.length === 0) return null;

    return (
      <nav className="flex mb-4" aria-label="Breadcrumb">
        <ol className="inline-flex items-center space-x-1 md:space-x-3">
          {breadcrumbs.map((crumb, index) => (
            <li key={index} className="inline-flex items-center">
              {index > 0 && (
                <svg className="w-6 h-6 text-gray-400" fill="currentColor" viewBox="0 0 20 20">
                  <path fillRule="evenodd" d="M7.293 14.707a1 1 0 010-1.414L10.586 10 7.293 6.707a1 1 0 011.414-1.414l4 4a1 1 0 010 1.414l-4 4a1 1 0 01-1.414 0z" clipRule="evenodd" />
                </svg>
              )}
              {crumb.href ? (
                <button
                  onClick={() => navigate(crumb.href)}
                  className="ml-1 text-sm font-medium text-gray-700 hover:text-blue-600 md:ml-2"
                >
                  {crumb.label}
                </button>
              ) : (
                <span className="ml-1 text-sm font-medium text-gray-500 md:ml-2">
                  {crumb.label}
                </span>
              )}
            </li>
          ))}
        </ol>
      </nav>
    );
  };

  const renderUserMenu = () => (
    <div className="relative">
      <button
        onClick={(e) => {
          e.stopPropagation();
          setUserMenuOpen(!userMenuOpen);
        }}
        className="flex items-center text-sm text-gray-700 hover:text-gray-900 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-lg p-2"
      >
        <div className="flex items-center">
          <div className="w-8 h-8 bg-gray-300 rounded-full flex items-center justify-center mr-3">
            <User className="w-5 h-5 text-gray-600" />
          </div>
          <div className="hidden md:block text-left">
            <div className="font-medium">{user?.first_name} {user?.last_name}</div>
            <div className="text-xs text-gray-500">{user?.email}</div>
          </div>
          <ChevronDown className="w-4 h-4 ml-2" />
        </div>
      </button>

      {userMenuOpen && (
        <div className="absolute right-0 mt-2 min-w-[1000px] max-w-[98vw] w-full sm:w-800 bg-white rounded-lg shadow-lg border border-gray-200 py-2 z-50">
          <div className="px-4 py-3 border-b border-gray-200">
            <p className="text-sm font-medium text-gray-900 whitespace-nowrap overflow-hidden text-ellipsis">
              {user?.first_name} {user?.last_name}
            </p>
            <p className="text-sm text-gray-500 whitespace-nowrap overflow-hidden text-ellipsis">{user?.email}</p>
            <span className={`inline-block mt-1 px-2 py-1 rounded text-xs font-medium ${getRoleBadgeColor(user?.role)}`}>
              {getRoleDisplayName(user?.role)}
            </span>
          </div>
          
          <button
            onClick={() => {
              setUserMenuOpen(false);
              navigate('/profile');
            }}
            className="block w-full text-left px-5 py-2 text-sm text-gray-700 hover:bg-gray-100 border-0 rounded-none flex items-center justify-start"
          >
            <User className="w-5 h-5 mr-5 flex-shrink-0" />
            Mon profil
          </button>
          
          <button
            onClick={() => {
              setUserMenuOpen(false);
              navigate('/settings');
            }}
            className="block w-full text-left px-5 py-2 text-sm text-gray-700 hover:bg-gray-100 border-0 rounded-none flex items-center justify-start"
          >
            <Settings className="w-5 h-5 mr-5 flex-shrink-0" />
            Paramètres
          </button>
          
            <button
              onClick={() => {
                setUserMenuOpen(false);
                handleLogout();
              }}
              className="block w-full text-left px-5 py-2 text-sm text-red-700 hover:bg-red-50 border-0 rounded-none flex items-center justify-start"
            >
              <LogOut className="w-5 h-5 mr-5 flex-shrink-0" />
              <span className="truncate">
              Déconnexion
              </span>
            </button>
        </div>
      )}
    </div>
  );

  const renderNotifications = () => (
    <button className="relative p-2 text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500 rounded-lg">
      <Bell className="w-5 h-5" />
      {notifications.length > 0 && (
        <span className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 text-white text-xs rounded-full flex items-center justify-center">
          {notifications.length}
        </span>
      )}
    </button>
  );

  const renderMobileMenu = () => (
    <div className="md:hidden">
      <button
        onClick={() => setSidebarOpen(!sidebarOpen)}
        className="p-2 rounded-lg text-gray-400 hover:text-gray-600 focus:outline-none focus:ring-2 focus:ring-blue-500"
      >
        {sidebarOpen ? <X className="w-6 h-6" /> : <Menu className="w-6 h-6" />}
      </button>
    </div>
  );

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-40">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            {/* Logo et titre */}
            <div className="flex items-center">
              {renderMobileMenu()}
              <button
                onClick={() => navigate('/dashboard')}
                className="flex items-center hover:opacity-80 transition-opacity"
              >
                <Clock className="w-8 h-8 text-blue-600 mr-3" />
                <h1 className="text-xl font-semibold text-gray-900">
                  Gardien du Temps
                </h1>
              </button>
  {/* ✅ AJOUTER : Icônes de pointage rapide */}
  {user?.role === 'director' && (
    <div className="ml-8 md:block">
      <QuickTimeTrackingIcons />
    </div>
  )}

            </div>
            
            {/* Actions du header */}
            <div className="flex items-center space-x-2">
              {actions && (
                <div className="hidden md:flex items-center space-x-2 mr-4">
                  {actions}
                </div>
              )}
              
              {renderNotifications()}
              {renderUserMenu()}
            </div>
          </div>
        </div>
      </header>

      <div className="flex">
        {/* Sidebar */}
        {sidebar && (
          <>
            {/* Overlay mobile */}
            {sidebarOpen && (
              <div 
                className="fixed inset-0 bg-gray-600 bg-opacity-75 z-30 md:hidden"
                onClick={() => setSidebarOpen(false)}
              />
            )}
            
            {/* Sidebar content */}
            <aside className={`
              fixed inset-y-0 left-0 z-40 w-64 bg-white shadow-lg transform transition-transform duration-300 ease-in-out
              md:relative md:translate-x-0 md:inset-auto md:z-auto
              ${sidebarOpen ? 'translate-x-0' : '-translate-x-full'}
            `}>
              <div className="h-full overflow-y-auto pt-16 md:pt-0">
                {sidebar}
              </div>
            </aside>
          </>
        )}

        {/* Main content */}
        <main className="flex-1 min-w-0">
          <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
            {/* Titre et breadcrumbs */}
            {(title || breadcrumbs) && (
              <div className="mb-6">
                {renderBreadcrumbs()}
                {title && (
                  <h1 className="text-2xl font-bold text-gray-900">{title}</h1>
                )}
              </div>
            )}
            
            {/* Contenu principal */}
            {children}
          </div>
        </main>
      </div>
    </div>
  );
};

// Composant pour le contenu de la sidebar
export const SidebarContent = ({ children, className = '' }) => (
  <div className={`p-4 ${className}`}>
    {children}
  </div>
);

// Composant pour les éléments de navigation
export const NavItem = ({ 
  icon, 
  label, 
  href, 
  active = false, 
  onClick, 
  children,
  badge
}) => {
  const navigate = useNavigate();
  
  const handleClick = () => {
    if (onClick) {
      onClick();
    } else if (href) {
      navigate(href);
    }
  };

  return (
    <button
      onClick={handleClick}
      className={`
        w-full flex items-center px-3 py-2 text-sm font-medium rounded-lg transition-colors
        ${active 
          ? 'bg-blue-100 text-blue-700 border-r-2 border-blue-700' 
          : 'text-gray-700 hover:bg-gray-100'
        }
      `}
    >
      {icon && <span className="mr-3">{icon}</span>}
      <span className="flex-1 text-left">{label}</span>
      {badge && (
        <span className="ml-2 px-2 py-1 text-xs bg-gray-200 text-gray-700 rounded-full">
          {badge}
        </span>
      )}
      {children}
    </button>
  );
};

export default Layout;
=== FIN frontend/src/components/common/Layout.jsx ===

=== FICHIER: frontend/src/components/common/YearlyPlanningRoadmap.jsx ===
// ✅ CORRIGER : Tous les imports nécessaires
import React, { useState, useEffect } from 'react';
import { useAuthStore } from '../../stores/authStore';
import { usePlanningStore } from '../../stores/planningStore';
import { useProjectStore } from '../../stores/projectStore';
import { useVacations } from '../../hooks/useVacations';
import api from '../../services/api';
import Card from './Card';
import Button from './Button';
import Modal from './Modal';
import PlanningModal from './PlanningModal';
import YearTypeSelector from './YearTypeSelector';
import {useSchoolVacationStore} from '../../stores/schoolVacationStore';
import { 
  Calendar, 
  Target, 
  BarChart3, 
  Clock, 
  Plus, 
  Settings 
} from 'lucide-react';
import { 
  YEAR_TYPES, 
  getCurrentYear, 
  getYearBounds 
} from '../../utils/dateUtils';
import { exportPlannedHoursToCSV } from '../../utils/exportCSV';

const YearlyPlanningRoadmap = ({ onBack }) => {
  const { user } = useAuthStore();
  const { yearlyPlanning, fetchYearlyPlanning, loading, upsertPlanning } = usePlanningStore();
  const { projects } = useProjectStore();
  
  const yearType = user?.year_type || YEAR_TYPES.CIVIL;
  const [selectedYear, setSelectedYear] = useState(() => getCurrentYear(yearType));
  
  const [currentMonth, setCurrentMonth] = useState(() => {
    const today = new Date();
    const todayMonth = today.getMonth();
    
    if (yearType === YEAR_TYPES.SCHOOL) {
      const currentSchoolYear = getCurrentYear(YEAR_TYPES.SCHOOL);
      if (selectedYear === currentSchoolYear) {
        return todayMonth;
      } else {
        return 8; // septembre = mois 8
      }
    }
    
    return todayMonth; // Mode civil : mois actuel
  });
  
  // États pour les modals
  const [showPlanningModal, setShowPlanningModal] = useState(false);
  const [selectedDate, setSelectedDate] = useState(null);
  const [editingPlanning, setEditingPlanning] = useState(null);
  const [showYearTypeModal, setShowYearTypeModal] = useState(false);

  // ✅ CORRIGER : Hook useVacations appelé au bon endroit (niveau composant)
  const { startDate, endDate } = getYearBounds(selectedYear, yearType);
  
  const [selectedZone, setSelectedZone] = useState('B');
  const { fetchVacations, selectedZone: storeZone, setZone, availableZones } = useSchoolVacationStore();
  
  // ✅ MODIFIER : Hook useVacations avec la zone sélectionnée
  const { isVacationDay, getVacationInfo, loading: vacationLoading, error: vacationError } = useVacations(startDate, endDate, selectedZone);
  
  // ✅ NOUVEAU : Gestionnaire de changement de zone
  const handleZoneChange = async (newZone) => {
    console.log('🗺️ Changement de zone:', newZone);
    setSelectedZone(newZone);
    setZone(newZone);
    
    // Recharger les vacances pour la nouvelle zone
    await fetchVacations(startDate, endDate, newZone);
  };
  
  // ✅ NOUVEAU : Sélecteur de zone à ajouter dans la UI
  const renderZoneSelector = () => (
    <div className="flex items-center space-x-3">
      <label className="text-sm font-medium text-gray-700">
        Zone scolaire :
      </label>
      <select
        value={selectedZone}
        onChange={(e) => handleZoneChange(e.target.value)}
        className="border border-gray-300 rounded-lg px-4 py-2 bg-white shadow-sm focus:ring-2 focus:ring-orange-500"
      >
        <option value="">Toutes les zones</option>
        {availableZones.map(zone => (
          <option key={zone} value={zone}>Zone {zone}</option>
        ))}
      </select>
    </div>
  );

  const { fetchVacations: fetchVacationsFromStore } = useSchoolVacationStore();


// ✅ AJOUTER : États pour la synchronisation
const [syncLoading, setSyncLoading] = useState(false);
const [syncStatus, setSyncStatus] = useState(null);

// ✅ AJOUTER : Fonction de synchronisation des vacances
const syncVacationsFromAPI = async () => {
  setSyncLoading(true);
  setSyncStatus(null);
  
  try {
    console.log('🔄 Synchronisation des vacances depuis l\'API educ.gouv...');
    
    const currentSchoolYear = selectedYear;
    const schoolYears = [
      `${currentSchoolYear - 1}-${currentSchoolYear}`, // 2023-2024
      `${currentSchoolYear}-${currentSchoolYear + 1}`,   // 2024-2025
      `${currentSchoolYear + 1}-${currentSchoolYear + 2}` // 2025-2026
    ];
    
    console.log('📅 Années à synchroniser:', schoolYears);
    
    const response = await api.post('/school-vacations/sync', {
      zones: ['A', 'B', 'C'],
      schoolYears: schoolYears
    });
    
    console.log('📡 Réponse API complète:', response.data);
    console.log('📊 Type de response.data.results:', typeof response.data.results);
    console.log('📊 Contenu results:', response.data.results);
    
    if (response.data.success) {
      console.log('✅ Synchronisation réussie');
      
      // ✅ CORRIGER : Gestion defensive des résultats
      let results = [];
      let count = 0;
      
      // Essayer différents formats de réponse
      if (response.data.results) {
        if (Array.isArray(response.data.results)) {
          results = response.data.results;
          count = results.length;
        } else if (typeof response.data.results === 'object') {
          // Si results est un objet avec created/updated
          count = (response.data.results.created || 0) + (response.data.results.updated || 0);
          results = []; // Pas de détails disponibles
        }
      } else if (response.data.data && Array.isArray(response.data.data)) {
        results = response.data.data;
        count = results.length;
      } else if (response.data.count) {
        count = response.data.count;
        results = [];
      }
      
      console.log(`📊 Résultats traités: ${count} périodes, ${results.length} détails`);
      
      setSyncStatus({
        type: 'success',
        message: `${count} périodes synchronisées depuis l'API gouvernementale`,
        details: Array.isArray(results) ? results : []
      });
      
      // ✅ FORCER : Rechargement après synchronisation
      console.log('🔄 Rechargement des vacances...');
      await fetchVacationsFromStore(startDate, endDate, 'B');
      
      // Auto-masquer après 8 secondes au lieu de 5
      setTimeout(() => setSyncStatus(null), 8000);
      
    } else {
      throw new Error(response.data.message || 'Erreur de synchronisation');
    }
    
  } catch (error) {
    console.error('❌ Erreur synchronisation:', error);
    console.error('❌ Détails erreur:', error.response?.data);
    
    setSyncStatus({
      type: 'error',
      message: error.response?.data?.message || error.message || 'Erreur lors de la synchronisation'
    });
    
    setTimeout(() => setSyncStatus(null), 10000);
  } finally {
    setSyncLoading(false);
  }
};


  // ✅ CORRIGER : useEffect pour synchroniser les vacances (niveau composant)
  useEffect(() => {
    const syncVacationsIfNeeded = async () => {
      try {
        // Vérifier s'il y a des vacances dans la base
        const response = await api.get('/school-vacations/calendar?zone=B&schoolYear=2024-2025');
        
        if (!response.data.success || response.data.count === 0) {
          console.log('🔄 Aucune vacance trouvée, synchronisation...');
          
          // Synchroniser automatiquement
          await api.post('/school-vacations/sync-auto');
          
          // Le hook se rechargera automatiquement
        }
      } catch (error) {
        console.log('ℹ️ Synchronisation automatique non disponible:', error.message);
      }
    };

    syncVacationsIfNeeded();
  }, []); // Exécution unique au montage

  // ✅ CORRIGER : useEffect pour debug (niveau composant)
  useEffect(() => {
    if (vacationError) {
      console.warn('⚠️ Erreur vacances:', vacationError);
    }
    if (!vacationLoading) {
      console.log('🏖️ Vacances chargées, test avec une date...');
      const testDate = new Date('2024-12-23'); // Vacances de Noël
      console.log('Test date 23/12/2024:', {
        isVacation: isVacationDay(testDate),
        info: getVacationInfo(testDate)
      });
    }
  }, [vacationLoading, vacationError, isVacationDay, getVacationInfo]);

  // Fonction pour obtenir les bornes de mois selon le type d'année
  const getMonthBounds = (year, yearType) => {
    if (yearType === YEAR_TYPES.SCHOOL) {
      return {
        startMonth: 8, // septembre
        endMonth: 7,   // août de l'année suivante
        startYear: year,
        endYear: year + 1
      };
    } else {
      return {
        startMonth: 0, // janvier
        endMonth: 11,  // décembre
        startYear: year,
        endYear: year
      };
    }
  };

  // Fonction pour obtenir l'année d'affichage du calendrier
  const getCalendarYear = (month) => {
    if (yearType === YEAR_TYPES.SCHOOL) {
      return month >= 8 ? selectedYear : selectedYear + 1;
    } else {
      return selectedYear;
    }
  };

  // Mettre à jour l'affichage du mois dans le header
  const getDisplayMonth = () => {
    const year = getCalendarYear(currentMonth);
    return `${monthNames[currentMonth]} ${year}`;
  };

  // Génère une grille plate de 42 jours (6 semaines × 7 jours)
  const getCalendarGrid = (selectedYear, month) => {
    const calendarYear = getCalendarYear(month);
    
    const firstDayOfMonth = new Date(calendarYear, month, 1);
    const startDay = (firstDayOfMonth.getDay() + 6) % 7; // Lundi=0
    const gridStart = new Date(calendarYear, month, 1 - startDay);

    const today = new Date();
    const todayStr = `${today.getFullYear()}-${String(today.getMonth() + 1).padStart(2, '0')}-${String(today.getDate()).padStart(2, '0')}`;

    return Array.from({ length: 42 }, (_, i) => {
      const date = new Date(gridStart);
      date.setDate(gridStart.getDate() + i);
      
      const dateStr = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}-${String(date.getDate()).padStart(2, '0')}`;
      const planning = yearlyPlanning.planning?.find(p => p.plan_date === dateStr);
      
      // ✅ CORRIGER : Utiliser les hooks correctement définis
      const isVacation = isVacationDay(date);
      const vacationInfo = isVacation ? getVacationInfo(date) : null;
      
      return {
        date,
        dateStr,
        day: date.getDate(),
        isCurrentMonth: date.getMonth() === month,
        isToday: dateStr === todayStr, 
        planning,
        isVacation,
        vacationInfo
      };
    });
  };

  // Navigation des mois selon le type d'année
  const navigateMonth = (direction) => {
    setCurrentMonth(prev => {
      const bounds = getMonthBounds(selectedYear, yearType);
      
      if (yearType === YEAR_TYPES.SCHOOL) {
        if (direction === 'prev') {
          if (prev === bounds.startMonth) {
            return bounds.endMonth;
          } else if (prev === 0) {
            return 11;
          } else {
            return prev - 1;
          }
        } else {
          if (prev === bounds.endMonth) {
            return bounds.startMonth;
          } else if (prev === 11) {
            return 0;
          } else {
            return prev + 1;
          }
        }
      } else {
        if (direction === 'prev') {
          return prev === 0 ? 11 : prev - 1;
        } else {
          return prev === 11 ? 0 : prev + 1;
        }
      }
    });
  };

  // Fonction "Aller à aujourd'hui" selon le type d'année
  const goToToday = () => {
    const today = new Date();
    const todayMonth = today.getMonth();
    const todayYear = today.getFullYear();
    
    if (yearType === YEAR_TYPES.SCHOOL) {
      const currentSchoolYear = getCurrentYear(YEAR_TYPES.SCHOOL);
      if (selectedYear !== currentSchoolYear) {
        setSelectedYear(currentSchoolYear);
      }
    } else {
      if (selectedYear !== todayYear) {
        setSelectedYear(todayYear);
      }
    }
    
    setCurrentMonth(todayMonth);
  };

  // getMonthlyPlannedHours pour la bonne année
  const getMonthlyPlannedHours = () => {
    if (!yearlyPlanning.planning || !Array.isArray(yearlyPlanning.planning)) {
      return 0;
    }
    
    try {
      const calendarYear = getCalendarYear(currentMonth);
      
      const monthlyTotal = yearlyPlanning.planning
        .filter(p => {
          if (!p.plan_date) return false;
          
          const planDate = new Date(p.plan_date + 'T00:00:00');
          if (isNaN(planDate.getTime())) return false;
          
          return planDate.getFullYear() === calendarYear && planDate.getMonth() === currentMonth;
        })
        .reduce((total, planning) => {
          const hours = parseFloat(planning.planned_hours) || 0;
          return total + hours;
        }, 0);
      
      return isNaN(monthlyTotal) ? 0 : Math.round(monthlyTotal * 100) / 100;
      
    } catch (error) {
      console.error('Erreur calcul heures mensuelles planifiées:', error);
      return 0;
    }
  };

  const calendarDays = getCalendarGrid(selectedYear, currentMonth);

  const monthNames = [
    'Janvier', 'Février', 'Mars', 'Avril', 'Mai', 'Juin',
    'Juillet', 'Août', 'Septembre', 'Octobre', 'Novembre', 'Décembre'
  ];

  const handleDateClick = (dayData) => {
    if (!dayData.isCurrentMonth) return;
    setSelectedDate(dayData.date);
    setEditingPlanning(dayData.planning);
    setShowPlanningModal(true);
  };

  const handleSavePlanning = async (planningData) => {
    const year = selectedDate.getFullYear();
    const month = String(selectedDate.getMonth() + 1).padStart(2, '0');
    const day = String(selectedDate.getDate()).padStart(2, '0');
    const localDateStr = `${year}-${month}-${day}`;
    
    const dataWithDate = {
      ...planningData,
      plan_date: localDateStr
    };
    
    console.log('📤 Données complètes envoyées:', dataWithDate);
    
    const result = await upsertPlanning(dataWithDate);
    if (result.success) {
      setShowPlanningModal(false);
      setEditingPlanning(null);
      setSelectedDate(null);
    }
    return result;
  };

  const renderYearSelector = () => (
    <div className="flex items-center space-x-3">
      <label className="text-sm font-medium text-gray-700">
        {yearType === YEAR_TYPES.SCHOOL ? 'Année scolaire :' : 'Année civile :'}
      </label>
      <select
        value={selectedYear}
        onChange={(e) => setSelectedYear(parseInt(e.target.value))}
        className="border border-gray-300 rounded-lg px-4 py-2 bg-white shadow-sm focus:ring-2 focus:ring-blue-500"
      >
        {[...Array(5)].map((_, i) => {
          const year = getCurrentYear(yearType) - 2 + i;
          return (
            <option key={year} value={year}>
              {yearType === YEAR_TYPES.SCHOOL ? `${year}-${year + 1}` : year}
              {year === getCurrentYear(yearType) ? ' (actuel)' : ''}
            </option>
          );
        })}
      </select>
    </div>
  );

  useEffect(() => {
    const loadPlanningData = async () => {
      if (user?.id && selectedYear && yearType) {
        const { startDate, endDate } = getYearBounds(selectedYear, yearType);
        await fetchYearlyPlanning(user.id, startDate, endDate);
      }
    };
    
    loadPlanningData();
  }, [selectedYear, yearType, user?.id, fetchYearlyPlanning]);

  if (loading && !yearlyPlanning.planning) {
    return (
      <Card title="Planification Annuelle">
        <div className="flex items-center justify-center py-12">
          <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-blue-600"></div>
          <span className="ml-3">Chargement...</span>
        </div>
      </Card>
    );
  }

  return (
    <div className="space-y-6">
      {/* Statistiques */}
      <Card className="border-t-4 border-t-blue-500">
        <div className="p-6">
          <div className="flex items-center justify-between mb-6">
            <div>
              <h2 className="text-2xl font-bold text-gray-900 flex items-center">
                <Calendar className="w-8 h-8 text-blue-600 mr-3" />
                Planification Annuelle
              </h2>
              <p className="text-gray-600 mt-1">Organisez votre temps pour {selectedYear}</p>
            </div>
            
            <div className="flex items-center space-x-3">
              {onBack && (
                <Button variant="outline" onClick={onBack} className="mr-3">
                  ← Retour
                </Button>
              )}
                            <Button 
                variant="outline" 
                onClick={() => exportPlannedHoursToCSV(yearlyPlanning, selectedYear, yearType)}
                className="ml-2"
              >
                📊 Exporter Planning
              </Button>
  <Button 
    variant="outline"
    onClick={syncVacationsFromAPI}
    size="sm"
    disabled={syncLoading}
    className="bg-orange-50 border-orange-200 text-orange-700 hover:bg-orange-100 disabled:opacity-50"
  >
    {syncLoading ? (
      <>
        <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-orange-600 mr-2"></div>
        Synchronisation...
      </>
    ) : (
      <>
        🏖️ Sync Vacances
      </>
    )}
  </Button>
  {/* ✅ NOUVEAU : Bouton de debug pour 2024-2025
  <Button 
    variant="outline"
    onClick={async () => {
      console.log('🔍 DEBUG: Vérification vacances 2024-2025...');
      
      try {
        // Test 1: Vérifier ce qu'on a en base pour 2024-2025
        const response1 = await api.get('/school-vacations/calendar?zone=B&schoolYear=2024-2025');
        console.log('📊 Vacances 2024-2025 en base:', response1.data);
        
        // Test 2: Vérifier l'API gouvernementale directement
        const response2 = await api.get('/school-vacations/raw-data?zone=B&schoolYear=2024-2025');
        console.log('📊 API gouv 2024-2025:', response2.data);
        
        // Test 3: Forcer sync uniquement 2024-2025
        const response3 = await api.post('/school-vacations/sync', {
          zones: ['B'],
          schoolYears: ['2024-2025']
        });
        console.log('📊 Sync forcée 2024-2025:', response3.data);
        
        alert('Vérifications terminées, regardez la console pour les détails');
        
      } catch (error) {
        console.error('❌ Erreur debug:', error);
        alert('Erreur debug: ' + error.message);
      }
    }}
    size="sm"
    className="bg-yellow-50 border-yellow-200 text-yellow-700"
  >
    🔍 Debug 2024-2025
  </Button> */}

              <Button 
                variant="outline"
                onClick={() => setShowYearTypeModal(true)}
                size="sm"
              >
                <Settings className="w-4 h-4 mr-2" />
                Type d'année
              </Button>
              {renderZoneSelector()}

              {renderYearSelector()}
            </div>
          </div>

{/* ✅ AJOUTER : Message de statut de synchronisation */}
{syncStatus && (
  <div className={`mb-4 p-4 rounded-lg border ${
    syncStatus.type === 'success' 
      ? 'bg-green-50 border-green-200 text-green-800' 
      : 'bg-red-50 border-red-200 text-red-800'
  }`}>
    <div className="flex items-center">
      <span className="mr-2">
        {syncStatus.type === 'success' ? '✅' : '❌'}
      </span>
      <span className="font-medium">{syncStatus.message}</span>
    </div>
    
    {/* ✅ CORRIGER : Vérifications multiples pour éviter l'erreur */}
    {syncStatus.details && 
     syncStatus.type === 'success' && 
     Array.isArray(syncStatus.details) && 
     syncStatus.details.length > 0 && (
      <div className="mt-2 text-sm">
        <details>
          <summary className="cursor-pointer hover:underline">
            Voir le détail ({syncStatus.details.length} périodes)
          </summary>
          <div className="mt-2 space-y-1">
            {syncStatus.details.slice(0, 10).map((result, idx) => (
              <div key={idx} className="text-xs bg-white p-2 rounded border">
                {/* ✅ CORRIGER : Gestion défensive des propriétés */}
                {(result?.status === 'created' || result?.action === 'created') ? '🆕' : '🔄'} 
                {result?.data?.period_name || result?.period_name || result?.title || 'Période inconnue'} - 
                Zone {result?.data?.zone || result?.zone || '?'}
                <span className="text-gray-500 ml-2">
                  ({result?.data?.start_date ? new Date(result.data.start_date).toLocaleDateString('fr-FR') : '?'} → 
                   {result?.data?.end_date ? new Date(result.data.end_date).toLocaleDateString('fr-FR') : '?'})
                </span>
              </div>
            ))}
            {syncStatus.details.length > 10 && (
              <div className="text-xs text-gray-500">
                ... et {syncStatus.details.length - 10} autres périodes
              </div>
            )}
          </div>
        </details>
      </div>
    )}
    
    {/* ✅ AJOUTER : Message si pas de détails ou détails vides */}
    {syncStatus.type === 'success' && 
     (!syncStatus.details || !Array.isArray(syncStatus.details) || syncStatus.details.length === 0) && (
      <div className="mt-2 text-sm text-green-600">
        Synchronisation terminée. Rechargez la page pour voir les nouvelles vacances.
      </div>
    )}
  </div>
)}


          {/* Statistiques en ligne */}
          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
            <div className="text-center p-4 bg-blue-50 rounded-lg border border-blue-200">
              <Target className="w-6 h-6 text-blue-600 mx-auto mb-2" />
              <p className="text-sm text-blue-600 font-medium">Objectif</p>
              <p className="text-xl font-bold text-blue-900">
                {yearlyPlanning.annual_objective || user?.annual_hours || 1600}h
              </p>
            </div>
            
            <div className="text-center p-4 bg-green-50 rounded-lg border border-green-200">
              <BarChart3 className="w-6 h-6 text-green-600 mx-auto mb-2" />
              <p className="text-sm text-green-600 font-medium">Planifiées</p>
              <p className="text-xl font-bold text-green-900">
                {yearlyPlanning.total_planned || 0}h
              </p>
            </div>
            
            <div className="text-center p-4 bg-orange-50 rounded-lg border border-orange-200">
              <Clock className="w-6 h-6 text-orange-600 mx-auto mb-2" />
              <p className="text-sm text-orange-600 font-medium">Restant</p>
              <p className="text-xl font-bold text-orange-900">
                {yearlyPlanning.remaining_hours || (user?.annual_hours || 1600)}h
              </p>
            </div>
            
            <div className="text-center p-4 bg-purple-50 rounded-lg border border-purple-200">
              <Calendar className="w-6 h-6 text-purple-600 mx-auto mb-2" />
              <p className="text-sm text-purple-600 font-medium">Ce mois</p>
              <p className="text-xl font-bold text-purple-900">
                {getMonthlyPlannedHours()}h
              </p>
            </div>
          </div>
        </div>
      </Card>

      {/* CALENDRIER */}
      <div style={{
        backgroundColor: 'white',
        borderRadius: '8px',
        boxShadow: '0 1px 3px 0 rgba(0, 0, 0, 0.1)',
        overflow: 'hidden'
      }}>
        {/* Header */}
        <div style={{
          display: 'flex',
          alignItems: 'center',
          justifyContent: 'space-between',
          borderBottom: '1px solid #e5e7eb',
          padding: '16px 24px'
        }}>
          <h1 style={{
            fontSize: '18px',
            fontWeight: '600',
            color: '#111827'
          }}>
            {getDisplayMonth()}
          </h1>
          
          <div style={{ display: 'flex', alignItems: 'center', gap: '16px' }}>
            {/* Navigation */}
            <div style={{
              display: 'flex',
              alignItems: 'center',
              border: '1px solid #d1d5db',
              borderRadius: '8px',
              overflow: 'hidden',
              backgroundColor: 'white'
            }}>
              <button 
                type="button" 
                onClick={() => navigateMonth('prev')}
                style={{
                  padding: '8px 12px',
                  backgroundColor: 'transparent',
                  border: 'none',
                  cursor: 'pointer',
                  color: '#6b7280',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#f9fafb'}
                onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              >
                <svg style={{ width: '16px', height: '16px' }} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M15 19l-7-7 7-7" />
                </svg>
              </button>
              
              <button 
                type="button" 
                onClick={goToToday}
                style={{
                  padding: '8px 16px',
                  backgroundColor: 'transparent',
                  border: 'none',
                  borderLeft: '1px solid #d1d5db',
                  borderRight: '1px solid #d1d5db',
                  cursor: 'pointer',
                  fontSize: '14px',
                  fontWeight: '500',
                  color: '#374151'
                }}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#f9fafb'}
                onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              >
                Aujourd'hui
              </button>
              
              <button 
                type="button" 
                onClick={() => navigateMonth('next')}
                style={{
                  padding: '8px 12px',
                  backgroundColor: 'transparent',
                  border: 'none',
                  cursor: 'pointer',
                  color: '#6b7280',
                  display: 'flex',
                  alignItems: 'center',
                  justifyContent: 'center'
                }}
                onMouseEnter={(e) => e.target.style.backgroundColor = '#f9fafb'}
                onMouseLeave={(e) => e.target.style.backgroundColor = 'transparent'}
              >
                <svg style={{ width: '16px', height: '16px' }} fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5l7 7-7 7" />
                </svg>
              </button>
            </div>

            {/* Bouton Planifier */}
            <button 
              type="button" 
              onClick={() => {
                setSelectedDate(new Date());
                setEditingPlanning(null);
                setShowPlanningModal(true);
              }}
              style={{
                display: 'flex',
                alignItems: 'center',
                gap: '8px',
                padding: '8px 16px',
                backgroundColor: '#2563eb',
                color: 'white',
                borderRadius: '8px',
                border: 'none',
                cursor: 'pointer',
                fontSize: '14px',
                fontWeight: '500',
                boxShadow: '0 1px 2px 0 rgba(0, 0, 0, 0.05)'
              }}
              onMouseEnter={(e) => e.target.style.backgroundColor = '#1d4ed8'}
              onMouseLeave={(e) => e.target.style.backgroundColor = '#2563eb'}
            >
              <Plus size={16} />
              Planifier
            </button>
          </div>
        </div>

        {/* En-têtes des jours */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(7, 1fr)',
          backgroundColor: '#f9fafb',
          borderBottom: '1px solid #e5e7eb'
        }}>
          {['Lundi', 'Mardi', 'Mercredi', 'Jeudi', 'Vendredi', 'Samedi', 'Dimanche'].map((day) => (
            <div 
              key={day} 
              style={{
                padding: '12px',
                textAlign: 'center',
                backgroundColor: 'white',
                margin: '1px',
                fontSize: '12px',
                fontWeight: '600',
                color: '#374151',
                textTransform: 'uppercase',
                letterSpacing: '0.05em'
              }}
            >
              {day.substring(0, 3)}
            </div>
          ))}
        </div>

        {/* GRILLE DES JOURS */}
        <div style={{
          display: 'grid',
          gridTemplateColumns: 'repeat(7, 1fr)',
          gap: '1px',
          backgroundColor: '#f3f4f6'
        }}>
          {calendarDays.map((dayData, idx) => (
            <div
              key={idx}
              style={{
                backgroundColor: dayData.isCurrentMonth ? 'white' : '#f9fafb',
                color: dayData.isCurrentMonth ? '#111827' : '#9ca3af',
                padding: '12px',
                cursor: dayData.isCurrentMonth ? 'pointer' : 'default',
                minHeight: '100px',
                display: 'flex',
                flexDirection: 'column',
                border: dayData.isToday ? '2px solid #3b82f6' : 'none',
                boxShadow: dayData.isVacation ? 'inset 0 0 0 2px #fbbf24' : 'none',
                transition: 'background-color 0.2s ease',
                overflow: 'hidden',
                maxHeight: '120px',
              }}
              onClick={() => handleDateClick(dayData)}
              onMouseEnter={e => {
                if (dayData.isCurrentMonth) e.currentTarget.style.backgroundColor = '#eff6ff';
              }}
              onMouseLeave={e => {
                if (dayData.isCurrentMonth) e.currentTarget.style.backgroundColor = 'white';
                else e.currentTarget.style.backgroundColor = '#f9fafb';
              }}
            >
              {/* Numéro du jour */}
              <div style={{
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'space-between',
                marginBottom: '8px'
              }}>
                <span style={{
                  fontSize: '14px',
                  fontWeight: '500',
                  display: dayData.isToday ? 'flex' : 'block',
                  alignItems: dayData.isToday ? 'center' : 'unset',
                  justifyContent: dayData.isToday ? 'center' : 'unset',
                  width: dayData.isToday ? '24px' : 'auto',
                  height: dayData.isToday ? '24px' : 'auto',
                  backgroundColor: dayData.isToday ? '#3b82f6' : 'transparent',
                  color: dayData.isToday ? 'white' : 'inherit',
                  borderRadius: dayData.isToday ? '50%' : '0',
                  fontWeight: dayData.isToday ? '600' : '500'
                }}>
                  {dayData.day}
                </span>
         
                {/* Indicateur vacances */}
                {dayData.isVacation && (
                  <span style={{
                    fontSize: '12px',
                    backgroundColor: '#fbbf24',
                    color: 'white',
                    padding: '2px 4px',
                    borderRadius: '4px',
                    fontWeight: '500'
                  }}>
                    🏖️
                  </span>
                )}
              </div>

              <div style={{ flex: 1 }}>
                {/* Info vacances (en premier) */}
                {dayData.isVacation && (
                  <div style={{
                    fontSize: '10px',
                    color: '#f59e0b',
                    marginBottom: '4px',
                    fontWeight: '500',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                    whiteSpace: 'nowrap'
                  }}>
      🏖️ {dayData.vacationInfo?.title?.replace(` - Zone ${selectedZone}`, '') || 'Vacances'}
    {!selectedZone && dayData.vacationInfo?.extendedProps?.zone && (
      <span style={{ fontSize: '9px', marginLeft: '4px', opacity: 0.8 }}>
        (Zone {dayData.vacationInfo.extendedProps.zone})
      </span>
    )}
                  </div>
                )}

                {/* Planifications */}
                {dayData.planning?.planned_hours > 0 && (
                  <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
                    <div style={{ display: 'flex', alignItems: 'center', gap: '8px' }}>
                      <div 
                        style={{
                          width: '12px',
                          height: '12px',
                          borderRadius: '50%',
                          backgroundColor: dayData.planning.color,
                          flexShrink: 0
                        }}
                      ></div>
                      <span style={{
                        fontSize: '12px',
                        fontWeight: '500',
                        color: '#111827',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}>
                        {dayData.planning.planned_hours}h
                      </span>
                    </div>
                    
                    {dayData.planning.project && (
                      <div style={{
                        fontSize: '11px',
                        color: '#6b7280',
                        marginLeft: '20px',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}>
                        {dayData.planning.project.name}
                      </div>
                    )}
                    
                    {dayData.planning.description && (
                      <div style={{
                        fontSize: '11px',
                        color: '#9ca3af',
                        marginLeft: '20px',
                        overflow: 'hidden',
                        textOverflow: 'ellipsis',
                        whiteSpace: 'nowrap'
                      }}>
                        {dayData.planning.description}
                      </div>
                    )}
                  </div>
                )}
              </div>
            </div>
          ))}
        </div>
      </div>

      {/* Modal de planification */}
      {showPlanningModal && (
        <PlanningModal
          isOpen={showPlanningModal}
          onClose={() => {
            setShowPlanningModal(false);
            setEditingPlanning(null);
            setSelectedDate(null);
          }}
          selectedDate={selectedDate}
          existingPlanning={editingPlanning}
          projects={projects}
          onSave={handleSavePlanning}
        />
      )}

      {/* Modal pour les paramètres */}
      {showYearTypeModal && (
        <Modal
          isOpen={showYearTypeModal}
          onClose={() => {
            setTimeout(() => {
              document.body.style.overflow = '';
              document.body.style.paddingRight = '';
              document.body.classList.remove('modal-open');
              
              const overlays = document.querySelectorAll('[class*="bg-gray-900"][class*="bg-opacity"]');
              overlays.forEach(overlay => {
                if (overlay.parentNode) {
                  overlay.parentNode.removeChild(overlay);
                }
              });
            }, 50);
            
            setShowYearTypeModal(false);
          }}
          title="Paramètres du calendrier"
          size="lg"
        >
          <YearTypeSelector 
            onClose={() => {
              setTimeout(() => {
                document.body.style.overflow = '';
                document.body.style.paddingRight = '';
                document.body.classList.remove('modal-open');
                
                const overlays = document.querySelectorAll('[class*="bg-gray-900"][class*="bg-opacity"]');
                overlays.forEach(overlay => {
                  if (overlay.parentNode) {
                    overlay.parentNode.removeChild(overlay);
                  }
                });
              }, 50);
              
              setShowYearTypeModal(false);
            }} 
          />
        </Modal>
      )}
    </div>
  );
};

export default YearlyPlanningRoadmap;
=== FIN frontend/src/components/common/YearlyPlanningRoadmap.jsx ===

