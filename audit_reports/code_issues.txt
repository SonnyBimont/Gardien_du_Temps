../frontend/src/components/auth/LoginForm.jsx:      console.error('Erreur de connexion:', error);
../frontend/src/components/auth/LoginForm.jsx:                    // TODO: Implémenter la récupération de mot de passe
../frontend/src/components/common/QuickTimeTrackingIcons.jsx:      console.error(`❌ Erreur lors du pointage ${action}:`, error);
../frontend/src/components/common/VacationTester.jsx:  console.log('🏖️ Test chargement vacances...');
../frontend/src/components/common/VacationTester.jsx:        console.log('✅ Synchronisation réussie');
../frontend/src/components/common/VacationTester.jsx:      console.error('❌ Erreur synchronisation:', error);
../frontend/src/components/common/VacationTester.jsx:      console.log('✅ Synchronisation complète réussie');
../frontend/src/components/common/VacationTester.jsx:    console.error('❌ Erreur synchronisation complète:', error);
../frontend/src/components/common/YearTypeSelector.jsx:    console.log('🔄 Sélection type:', newType);
../frontend/src/components/common/YearTypeSelector.jsx:      console.log('✅ Aucun changement nécessaire');
../frontend/src/components/common/YearTypeSelector.jsx:    console.log('💾 Sauvegarde du type:', selectedType);
../frontend/src/components/common/YearTypeSelector.jsx:      console.log('✅ Type d\'année mis à jour');
../frontend/src/components/common/YearTypeSelector.jsx:      console.error('❌ Erreur:', result.error);
../frontend/src/components/common/PlanningModal.jsx:      console.log('📝 Données du formulaire:', formData);
../frontend/src/components/common/PlanningModal.jsx:      console.log('📤 Données à sauvegarder:', dataToSave);
../frontend/src/components/common/PlanningModal.jsx:      console.log('✅ Résultat:', result);
../frontend/src/components/common/PlanningModal.jsx:        console.log('🎉 Sauvegarde réussie');
../frontend/src/components/common/PlanningModal.jsx:        console.error('❌ Erreur serveur:', errorMessage);
../frontend/src/components/common/PlanningModal.jsx:      console.error('💥 Erreur catch:', error);
../frontend/src/components/common/PlanningModal.jsx:        console.log('🗑️ Suppression réussie');
../frontend/src/components/common/PlanningModal.jsx:      console.error('Erreur suppression:', error);
../frontend/src/components/common/Layout.jsx:      console.error('Erreur lors de la déconnexion:', error);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:    console.log('🔄 Chargement données année:', { selectedYear, yearType });
../frontend/src/components/common/RealizedHoursRoadmap.jsx:    console.log('📅 Période de chargement:', { startDate, endDate });
../frontend/src/components/common/RealizedHoursRoadmap.jsx:      console.log(`📊 Données reçues: ${entries.length} entrées`);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:      console.log(`✅ Données traitées: ${Object.keys(yearlyData).length} jours, ${totalRealizedYear}h total`);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:    console.error('❌ Erreur chargement heures réalisées:', error);
../frontend/src/components/common/RealizedHoursRoadmap.jsx:      console.error('Erreur calcul heures mensuelles réalisées:', error);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('🗺️ Changement de zone:', newZone);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('🔄 Synchronisation des vacances depuis l\'API educ.gouv...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📅 Années à synchroniser:', schoolYears);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📡 Réponse API complète:', response.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📊 Type de response.data.results:', typeof response.data.results);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📊 Contenu results:', response.data.results);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('✅ Synchronisation réussie');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log(`📊 Résultats traités: ${count} périodes, ${results.length} détails`);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('🔄 Rechargement des vacances...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.error('❌ Erreur synchronisation:', error);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.error('❌ Détails erreur:', error.response?.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:          console.log('🔄 Aucune vacance trouvée, synchronisation...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('ℹ️ Synchronisation automatique non disponible:', error.message);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.warn('⚠️ Erreur vacances:', vacationError);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('🏖️ Vacances chargées, test avec une date...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('Test date 23/12/2024:', {
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.error('Erreur calcul heures mensuelles planifiées:', error);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:    console.log('📤 Données complètes envoyées:', dataWithDate);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:      console.log('🔍 DEBUG: Vérification vacances 2024-2025...');
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('📊 Vacances 2024-2025 en base:', response1.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('📊 API gouv 2024-2025:', response2.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.log('📊 Sync forcée 2024-2025:', response3.data);
../frontend/src/components/common/YearlyPlanningRoadmap.jsx:        console.error('❌ Erreur debug:', error);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('🔧 Données avant modification:', formData);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('👤 User ID:', user.id);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('📤 Données envoyées:', updateData);
../frontend/src/components/forms/EditUserForm.jsx:    console.log('✅ Résultat:', result);
../frontend/src/components/forms/EditUserForm.jsx:      console.error('❌ Erreur dans la réponse:', result);
../frontend/src/components/forms/EditUserForm.jsx:    console.error('❌ Erreur lors de la modification:', error);
../frontend/src/components/forms/EditUserForm.jsx:    console.error('❌ Détails de l\'erreur:', error.response?.data);
../frontend/src/components/forms/CreateTaskForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/forms/CreateUserForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/forms/CreateStructureForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/forms/CreateProjectForm.jsx:      console.error('Erreur lors de la sauvegarde:', error);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:        console.error('Erreur lors du chargement des données:', error);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:      console.log(`🔄 Action de pointage: ${action}`);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:      console.log(`✅ Résultat action ${action}:`, result);
../frontend/src/components/dashboard/AnimatorDashboard.jsx:      console.error(`❌ Erreur lors du pointage ${action}:`, error);
../frontend/src/components/dashboard/AdminDashboard.jsx:      console.log('🔄 Changement de période vers:', period);
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('📅 Plage de dates calculée:', dateRangeData);
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('✅ Données rechargées pour la période:', period);
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.error('❌ Erreur lors du changement de période:', error);
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('🔧 Modification utilisateur:', user);
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Utilisateur mis à jour avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Utilisateur créé avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('🔧 Modification structure:', structure);
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Structure créée avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:    console.log('✅ Structure mise à jour avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('🔄 Chargement initial des données admin...');
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.log('✅ Données admin chargées avec succès');
../frontend/src/components/dashboard/AdminDashboard.jsx:        console.error('❌ Erreur lors du chargement initial:', error);
../frontend/src/components/dashboard/AdminDashboard.jsx:                      console.log(`✅ Statut utilisateur ${user.id} modifié`);
../frontend/src/components/dashboard/AdminDashboard.jsx:                      console.error('❌ Erreur toggle user status:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error('Erreur lors du chargement des données:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('🔄 Chargement données équipe pour structure:', user.structure_id);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('📊 Réponse API team-summary:', result);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('📋 Données API reçues:', apiData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('👥 Utilisateurs depuis API:', usersFromAPI);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('🗺️ Map des données de travail:', workDataMap);
../frontend/src/components/dashboard/DirectorDashboard.jsx:          console.log(`✅ Données trouvées pour ${animator.first_name}:`, workData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:          console.log(`⚠️ Pas de données pour ${animator.first_name}, calcul par défaut`);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.log('📋 Tableau final avec tous les animateurs:', allAnimatorsData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.warn('⚠️ API team-summary: pas de données ou échec');
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.error('❌ Erreur chargement équipe:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('🔄 Fallback avec données par défaut:', fallbackData);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error(`❌ Erreur lors du pointage ${action}:`, error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:        console.log('Export des données d\'équipe...');
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error('Erreur lors de l\'export:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:        console.log(`✅ Statut animateur ${animator.id} modifié`);
../frontend/src/components/dashboard/DirectorDashboard.jsx:        console.error('❌ Erreur toggle status:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:                          console.log(`✅ Statut animateur ${member.id} modifié`);
../frontend/src/components/dashboard/DirectorDashboard.jsx:                          console.error('❌ Erreur toggle status:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:      console.error('Erreur chargement stats animateur:', error);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('🔄 Calcul des stats complètes...');
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Entrées reçues:', entries.length);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📋 Première entrée:', entries[0]);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('⚠️ Aucune entrée, retour stats vides');
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📈 Jours traités:', processedDays.length);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Premier jour traité:', processedDays[0]);
../frontend/src/components/dashboard/DirectorDashboard.jsx:    console.log('⚠️ Aucun jour traité');
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('✅ Working days créés:', workingDays.length);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Premier working day:', workingDays[0]);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('✅ Stats complètes calculées:', result);
../frontend/src/components/dashboard/DirectorDashboard.jsx:  console.log('📊 Working days dans result:', result.workingDays.length);
../frontend/src/services/api.js:      console.log(`🚀 API Request: ${config.method?.toUpperCase()} ${config.url}`);
../frontend/src/services/api.js:    console.log('🚀 API Request:', config.method?.toUpperCase(), config.url);
../frontend/src/services/api.js:    console.log('🌐 Full URL:', config.baseURL + config.url);
../frontend/src/services/api.js:    console.error('❌ Request Error:', error);
../frontend/src/services/api.js:      console.log(`✅ API Response: ${response.config.method?.toUpperCase()} ${response.config.url}`, response.data);
../frontend/src/services/api.js:    console.error('❌ Response Error:', error);
../frontend/src/services/api.js:      console.error('Erreur serveur:', error.response.data);
../frontend/src/services/api.js:      console.error('Erreur de réseau - Vérifiez votre connexion');
../frontend/src/stores/schoolVacationStore.js:          console.log('🎓 Année scolaire détectée:', schoolYearStr);
../frontend/src/stores/schoolVacationStore.js:          console.log('📅 Année civile convertie en scolaire:', `${year}-${year + 1}`);
../frontend/src/stores/schoolVacationStore.js:      console.log('🏖️ Appel API vacances:', { zone: zone || 'TOUTES', startDate, endDate, params: params.toString() });
../frontend/src/stores/schoolVacationStore.js:        console.log('✅ Vacances reçues:', response.data.data);
../frontend/src/stores/schoolVacationStore.js:      console.error('❌ Erreur chargement vacances:', error);
../frontend/src/stores/timeStore.js:      console.warn('API today non disponible, fallback...', error.response?.status);
../frontend/src/stores/timeStore.js:      console.warn('API stats non disponible, calcul local...', error.response?.status);
../frontend/src/stores/timeStore.js:    console.log('📡 Requête team-summary avec params:', params.toString());
../frontend/src/stores/timeStore.js:    console.log('📊 Réponse brute team-summary:', response.data);
../frontend/src/stores/timeStore.js:    console.error('❌ Erreur fetchTeamSummary:', error);
../frontend/src/stores/adminStore.js:    console.log('🔧 adminStore.updateUser appelé avec:', { userId, userData });
../frontend/src/stores/adminStore.js:      console.log('✅ Réponse API updateUser:', response.data);
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur updateUser:', error);
../frontend/src/stores/adminStore.js:      console.error('❌ Réponse d\'erreur:', error.response?.data);
../frontend/src/stores/adminStore.js:      console.log(`🔄 Toggle user ${userId} to ${active ? 'active' : 'inactive'}`);
../frontend/src/stores/adminStore.js:        console.log(`✅ User ${userId} ${active ? 'activé' : 'désactivé'}`);
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur toggle user status:', errorMessage);
../frontend/src/stores/adminStore.js:        console.log('🏢 Structures à mettre dans le store:', structures);
../frontend/src/stores/adminStore.js:      console.log('🔄 fetchStats appelé avec:', { days, startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Utilisation période fixe:', { startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Utilisation période glissante:', days, 'jours');
../frontend/src/stores/adminStore.js:        console.log('📅 Utilisation période par défaut: 7 jours');
../frontend/src/stores/adminStore.js:        console.log('📡 Réponse API stats-fixed (nouvelle route):', response.data);
../frontend/src/stores/adminStore.js:          console.log('✅ Stats mises à jour via nouvelle route');
../frontend/src/stores/adminStore.js:        console.warn('⚠️ Nouvelle route stats-fixed non disponible, fallback vers ancienne route:', fixedRouteError.response?.status);
../frontend/src/stores/adminStore.js:          console.log('📡 Réponse API stats (ancienne route):', response.data);
../frontend/src/stores/adminStore.js:            console.log('✅ Stats mises à jour via ancienne route (fallback)');
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur fetch stats détaillée:', error);
../frontend/src/stores/adminStore.js:      console.log('🔄 fetchDashboardStats appelé avec:', { days, startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Dashboard période fixe:', { startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Dashboard période glissante:', days, 'jours');
../frontend/src/stores/adminStore.js:        console.log('📅 Dashboard période par défaut: 7 jours');
../frontend/src/stores/adminStore.js:        console.log('📡 Réponse API dashboard-stats-fixed (nouvelle route):', response.data);
../frontend/src/stores/adminStore.js:          console.log('✅ Dashboard stats mises à jour via nouvelle route');
../frontend/src/stores/adminStore.js:        console.warn('⚠️ Nouvelle route dashboard-stats-fixed non disponible, fallback vers ancienne route:', fixedRouteError.response?.status);
../frontend/src/stores/adminStore.js:          console.log('📡 Réponse API dashboard-stats (ancienne route):', response.data);
../frontend/src/stores/adminStore.js:            console.log('✅ Dashboard stats mises à jour via ancienne route (fallback)');
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur dashboard stats:', error);
../frontend/src/stores/adminStore.js:      console.log('🔄 fetchRecentActivity appelé avec:', { limit, days, startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Activité récente période fixe:', { startDate, endDate });
../frontend/src/stores/adminStore.js:        console.log('📅 Activité récente période glissante:', days, 'jours');
../frontend/src/stores/adminStore.js:        console.log('📡 Réponse API recent-activity-period (nouvelle route):', response.data);
../frontend/src/stores/adminStore.js:          console.log('✅ Activité récente mise à jour via nouvelle route:', activityData.length, 'entrées');
../frontend/src/stores/adminStore.js:        console.warn('⚠️ Nouvelle route recent-activity-period non disponible, fallback vers ancienne route:', fixedRouteError.response?.status);
../frontend/src/stores/adminStore.js:          console.log('📡 Réponse API recent-activity (ancienne route):', response.data);
../frontend/src/stores/adminStore.js:            console.log('✅ Activité récente mise à jour via ancienne route (fallback):', activityData.length, 'entrées');
../frontend/src/stores/adminStore.js:      console.error('❌ Erreur activité récente:', error);
../frontend/src/stores/planningStore.js:      console.error('Erreur planningStore:', error);
../frontend/src/stores/authStore.js:          console.error('Erreur vérification auth:', error);
../frontend/src/stores/authStore.js:  console.log('🔄 AuthStore: Mise à jour yearType vers:', yearType);
../frontend/src/stores/authStore.js:    console.log('📡 Réponse API:', response.data);
../frontend/src/stores/authStore.js:      console.log('✅ User mis à jour:', updatedUser);
../frontend/src/stores/authStore.js:    console.error('❌ Erreur mise à jour type d\'année:', error);
../frontend/src/hooks/useVacations.js:        console.log('🏖️ Hook useVacations: Chargement...', { startDate, endDate, zone });
../frontend/src/App.js:      console.error('Navigation error:', error);
../frontend/src/App.js:        console.error('Erreur lors de l\'initialisation:', error);
../frontend/src/index.js:    console.error('Erreur non capturée:', event.error);
../frontend/src/index.js:    console.error('Promesse rejetée non gérée:', event.reason);
../frontend/src/index.js:    console.log('🚀 Mode développement activé');
../frontend/src/index.js:    console.log('API URL:', process.env.REACT_APP_API_URL || 'http://localhost:3001');
../frontend/src/index.js:          console.log('SW registered: ', registration);
../frontend/src/index.js:          console.log('SW registration failed: ', registrationError);
../frontend/src/index.js:      getCLS(console.log);
../frontend/src/index.js:      getFID(console.log);
../frontend/src/index.js:      getFCP(console.log);
../frontend/src/index.js:      getLCP(console.log);
../frontend/src/index.js:      getTTFB(console.log);
../frontend/src/index.js:    console.error('Erreur critique lors du rendu:', error);
../frontend/src/index.js:    console.log('🔄 Hot reload détecté');
../frontend/src/utils/timeCalculations.js:  console.group(`🕐 Debug Time Entry - ${entry.date}`);
../frontend/src/utils/timeCalculations.js:  console.log('Arrival:', entry.arrival || 'Non pointé');
../frontend/src/utils/timeCalculations.js:  console.log('Break Start:', entry.breakStart || 'Pas de pause');
../frontend/src/utils/timeCalculations.js:  console.log('Break End:', entry.breakEnd || 'Pause non terminée');
../frontend/src/utils/timeCalculations.js:  console.log('Departure:', entry.departure || 'Non pointé');
../frontend/src/utils/timeCalculations.js:  console.log('Working Hours:', entry.formattedWorkingHours);
../frontend/src/utils/timeCalculations.js:  console.log('Status:', entry.status);
../frontend/src/utils/timeCalculations.js:  console.groupEnd();
../frontend/src/utils/dateUtils.js:      console.log('🎓 getCurrentYear SCHOOL:', {
../frontend/src/utils/dateUtils.js:  console.log('🎓 Debug année scolaire:');
../frontend/src/utils/dateUtils.js:  console.log('- Date du jour:', today.toLocaleDateString('fr-FR'));
../frontend/src/utils/dateUtils.js:  console.log('- Mois actuel:', today.getMonth() + 1); // +1 car getMonth() retourne 0-11
../frontend/src/utils/dateUtils.js:  console.log('- Année scolaire actuelle:', `${currentSchoolYear}-${currentSchoolYear + 1}`);
../frontend/src/utils/dateUtils.js:  console.log('- Période:', `${currentSchoolYear}-09-01 → ${currentSchoolYear + 1}-08-31`);
../backend/src/middlewares/auth.js:            console.log('🎫 Token trouvé:', token ? 'OUI' : 'NON');
../backend/src/middlewares/auth.js:            console.error('❌ Pas de token');
../backend/src/middlewares/auth.js:        console.error('❌ Erreur auth middleware:', error);
../backend/src/services/scheduleService.js:    console.log('Démarrage de la synchronisation automatique des vacances scolaires');
../backend/src/services/scheduleService.js:        console.log('Synchronisation des vacances scolaires terminée avec succès');
../backend/src/services/scheduleService.js:        console.error('Erreur lors de la synchronisation automatique des vacances scolaires:', error);
../backend/src/services/scheduleService.js:        console.log('Tâche planifiée pour la synchronisation des vacances scolaires configurée');
../backend/src/controllers/userController.js:    console.error('Erreur: Modèles non importés correctement');
../backend/src/controllers/userController.js:    console.log('User:', !!User);
../backend/src/controllers/userController.js:    console.log('Structure:', !!Structure);
../backend/src/controllers/userController.js:    console.log('TimeTracking:', !!TimeTracking);
../backend/src/controllers/userController.js:    console.log('Task:', !!Task);
../backend/src/controllers/userController.js:        console.log('🔍 Conditions de recherche utilisateurs:', whereConditions);
../backend/src/controllers/userController.js:        console.log(`📊 Trouvé ${users.length} utilisateurs (actifs: ${users.filter(u => u.active).length}, inactifs: ${users.filter(u => !u.active).length})`);
../backend/src/controllers/userController.js:        console.error('Erreur getUsers:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getUserById:', error);
../backend/src/controllers/userController.js:        console.error('Erreur createUser:', error);
../backend/src/controllers/userController.js:    console.error('Erreur lors de la mise à jour de l\'utilisateur:', error);
../backend/src/controllers/userController.js:        console.error('Erreur deleteUser:', error);
../backend/src/controllers/userController.js:        console.error('Erreur restoreUser:', error);
../backend/src/controllers/userController.js:        console.error('Erreur toggleUserStatus:', error);
../backend/src/controllers/userController.js:    console.log('🔍 Headers authorization:', req.headers.authorization);
../backend/src/controllers/userController.js:    console.log('🔍 req.user complet:', req.user);
../backend/src/controllers/userController.js:    console.log('🔍 req.user.id:', req.user?.id);
../backend/src/controllers/userController.js:    console.log('🔍 Type de req.user.id:', typeof req.user?.id);
../backend/src/controllers/userController.js:    console.log('🔍 req.body:', req.body);
../backend/src/controllers/userController.js:    console.log('🔄 Données à mettre à jour:', updateData);
../backend/src/controllers/userController.js:    console.log('✅ Utilisateur mis à jour:', updatedUser.toJSON());
../backend/src/controllers/userController.js:    console.error('❌ Erreur lors de la mise à jour du profil:', error);
../backend/src/controllers/userController.js:        console.log('📊 getStats appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période fixe:', dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période glissante:', days, 'jours depuis:', dateRange.start);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation semaine en cours par défaut:', dateRange);
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calcul TimeTracking (non bloquant):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Stats calculées:', statsData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getStats:', error);
../backend/src/controllers/userController.js:        console.log('📊 getDashboardStats appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.log('📅 Dashboard période fixe:', dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Dashboard période glissante:', days, 'jours depuis:', dateRange.start);
../backend/src/controllers/userController.js:            console.log('📅 Dashboard semaine en cours par défaut:', dateRange);
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calcul TimeTracking aujourd\'hui (non bloquant):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Dashboard stats calculées:', dashboardData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getDashboardStats:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getRecentActivity:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getSystemHealth:', error);
../backend/src/controllers/userController.js:        console.error('Erreur getAuditLogs:', error);
../backend/src/controllers/userController.js:        console.log('📊 getStatsWithFixedPeriods appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.error('❌ Modèles essentiels non disponibles');
../backend/src/controllers/userController.js:            console.log('📅 Utilisation dates explicites:', dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période nommée:', period, dateRange);
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période glissante:', daysInt, 'jours');
../backend/src/controllers/userController.js:            console.log('📅 Utilisation période par défaut: semaine en cours');
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calculs TimeTracking (ignorée):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Stats calculées:', statsData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getStatsWithFixedPeriods détaillée:', error);
../backend/src/controllers/userController.js:        console.log('📊 getDashboardStatsWithFixedPeriods appelé avec query:', req.query);
../backend/src/controllers/userController.js:                console.warn('⚠️ Erreur calculs dashboard TimeTracking (ignorée):', timeError.message);
../backend/src/controllers/userController.js:        console.log('✅ Dashboard stats calculées:', dashboardData);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getDashboardStatsWithFixedPeriods:', error);
../backend/src/controllers/userController.js:        console.log('📊 getRecentActivityWithPeriod appelé avec query:', req.query);
../backend/src/controllers/userController.js:            console.warn('⚠️ TimeTracking non disponible');
../backend/src/controllers/userController.js:        console.log(`✅ Activité récente trouvée: ${recentActivity.length} entrées`);
../backend/src/controllers/userController.js:        console.error('❌ Erreur getRecentActivityWithPeriod:', error);
../backend/src/controllers/plannedScheduleController.js:    console.error('Erreur lors de la récupération de la planification:', error);
../backend/src/controllers/structureController.js:        console.error('Erreur createStructure:', error);
../backend/src/controllers/structureController.js:        console.error('Erreur updateStructure:', error);
../backend/src/controllers/timeTrackingController.js:    console.log('🔍 Backend timeTracking params:', { startDate, endDate, userId, yearType });
../backend/src/controllers/timeTrackingController.js:      console.log('📅 Backend période:', { startDate, endDate });
../backend/src/controllers/timeTrackingController.js:    console.log(`📊 Backend trouvé: ${timeEntries.length} entrées pour la période`);
../backend/src/controllers/timeTrackingController.js:    console.error('❌ Erreur backend timeTracking:', error);
../backend/src/controllers/timeTrackingController.js:    console.error('Erreur lors de la récupération des entrées de temps:', error);
../backend/src/controllers/timeTrackingController.js:        console.error('Erreur quickTimeEntry:', error);
../backend/src/controllers/timeTrackingController.js:        console.error('Erreur getTimeStats:', error);
../backend/src/controllers/timeTrackingController.js:    console.error('Erreur getTeamSummary:', error);
../backend/src/controllers/schoolVacationController.js:    console.log('🔄 Début synchronisation forcée:', { zones, schoolYears, forceSync });
../backend/src/controllers/schoolVacationController.js:      console.log('🗑️ Suppression forcée de toutes les anciennes vacances...');
../backend/src/controllers/schoolVacationController.js:      console.log(`🗑️ ${deletedCount} anciennes vacances supprimées`);
../backend/src/controllers/schoolVacationController.js:          console.log(`📡 Récupération zone ${zone}, année ${schoolYear}...`);
../backend/src/controllers/schoolVacationController.js:          console.log(`📡 URL: ${apiUrl}`);
../backend/src/controllers/schoolVacationController.js:            console.warn(`⚠️ Réponse API vide pour zone ${zone}`);
../backend/src/controllers/schoolVacationController.js:          console.log(`📊 ${records.length} records reçus de l'API pour zone ${zone}`);
../backend/src/controllers/schoolVacationController.js:            console.warn(`⚠️ Aucun record pour zone ${zone}, année ${schoolYear}`);
../backend/src/controllers/schoolVacationController.js:    console.warn('⚠️ Record incomplet ignoré:', fields);
../backend/src/controllers/schoolVacationController.js:    console.log(`ℹ️ Ignoré (enseignants seulement):`, fields.description);
../backend/src/controllers/schoolVacationController.js:    console.log(`ℹ️ Ignoré (population inconnue: ${population}):`, fields.description);
../backend/src/controllers/schoolVacationController.js:    console.log(`ℹ️ Ignoré (zone: ${recordZones}, attendu: Zone ${zone}):`, fields.description);
../backend/src/controllers/schoolVacationController.js:              console.log(`✅ CRÉÉ: ${fields.description} (${fields.start_date} → ${fields.end_date})`);
../backend/src/controllers/schoolVacationController.js:              console.error(`❌ Erreur création ${fields.description}:`, createError.message);
../backend/src/controllers/schoolVacationController.js:          console.error(`❌ Erreur API zone ${zone}, année ${schoolYear}:`, apiError.message);
../backend/src/controllers/schoolVacationController.js:    console.log(`🎉 Synchronisation terminée:`, summary);
../backend/src/controllers/schoolVacationController.js:    console.log(`📋 Détails:`, results.map(r => `${r.zone}: ${r.period}`));
../backend/src/controllers/schoolVacationController.js:      console.error(`❌ Erreurs:`, errors);
../backend/src/controllers/schoolVacationController.js:    console.error('❌ Erreur globale synchronisation:', globalError);
../backend/src/controllers/hourPlanningController.js:    console.log('🎯 DEBUT upsertPlanning');
../backend/src/controllers/hourPlanningController.js:    console.log('👤 User:', req.user ? req.user.id : 'NON AUTHENTIFIE');
../backend/src/controllers/hourPlanningController.js:    console.log('📦 Body reçu:', req.body);
../backend/src/controllers/hourPlanningController.js:      console.error('❌ plan_date manquant');
../backend/src/controllers/hourPlanningController.js:      console.error('❌ planned_hours invalide:', planned_hours);
../backend/src/controllers/hourPlanningController.js:      console.error('❌ planned_hours hors limite:', hoursValue);
../backend/src/controllers/hourPlanningController.js:      console.error('❌ Utilisateur non authentifié');
../backend/src/controllers/hourPlanningController.js:    console.log('✅ Validation OK, tentative upsert...');
../backend/src/controllers/hourPlanningController.js:      console.log('🗑️ Suppression demandée (0 heures)');
../backend/src/controllers/hourPlanningController.js:      console.log('✅ Lignes supprimées:', deleted);
../backend/src/controllers/hourPlanningController.js:    console.log('📝 Données à insérer:', dataToInsert);
../backend/src/controllers/hourPlanningController.js:    console.log('✅ Planning sauvegardé:', planning.toJSON());
../backend/src/controllers/hourPlanningController.js:    console.error('❌ ERREUR UPSERT PLANNING:', error);
../backend/src/controllers/hourPlanningController.js:    console.error('📍 Stack trace:', error.stack);
../backend/src/app.js:    console.log(`[${dateISO}] ${method} ${path} - IP: ${clientIP}`);
../backend/src/app.js:    console.error(err.stack);
../backend/src/app.js:        console.log('Connexion à la base de données réussie.');
../backend/src/app.js:            console.log(`Serveur démarré sur le port ${config.port}`);
../backend/src/app.js:            console.log(`API disponible sur http://localhost:${config.port}/api`);
../backend/src/app.js:        console.error('Impossible de se connecter à la base de données:', error);
../backend/src/config/config.js:        logging: process.env.DB_LOGGING === 'true' ? console.log : false,
../backend/src/seeders/20250513143951-demo-users.js:    console.log('Structures trouvées:', structures);
../backend/src/seeders/20250513143951-demo-users.js:      console.log('ID Centre Paris:', parisId);
../backend/src/seeders/20250513143951-demo-users.js:      console.log('ID Centre Lyon:', lyonId);
../backend/src/seeders/20250513143951-demo-users.js:      console.log('ID Marseille:', marseilleId);
../backend/src/seeders/20250513143951-demo-users.js:      console.error('Erreur lors de la création des utilisateurs:', error);
../backend/src/seeders/20250513144000-demo-tasks.js:    console.log('Projets trouvés:', projects);
../backend/src/seeders/20250513144000-demo-tasks.js:      console.error('Erreur lors de la création des tâches:', error);
